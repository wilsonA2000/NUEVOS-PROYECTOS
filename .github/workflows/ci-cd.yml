name: VeriHome CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # Job 1: Tests y Quality Checks
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verihome_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        cat << EOF > .env
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        DATABASE_ENGINE=django.db.backends.postgresql
        DATABASE_NAME=verihome_test
        DATABASE_USER=postgres
        DATABASE_PASSWORD=postgres
        DATABASE_HOST=localhost
        DATABASE_PORT=5432
        REDIS_URL=redis://localhost:6379
        CELERY_BROKER_URL=redis://localhost:6379/0
        CELERY_RESULT_BACKEND=redis://localhost:6379/0
        EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
        EOF

    - name: Run migrations
      run: |
        python manage.py migrate --noinput

    - name: Run Django tests
      run: |
        python manage.py test --parallel --keepdb

    - name: Run security checks
      run: |
        python manage.py check --deploy

    - name: Generate coverage report
      run: |
        coverage run --source='.' manage.py test
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Job 2: Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: staticfiles/frontend/

  # Job 3: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -x ./venv/,./frontend/node_modules/ -f json -o bandit-report.json

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 4: Performance Tests
  performance-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verihome_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Create .env file
      run: |
        cat << EOF > .env
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=False
        DATABASE_ENGINE=django.db.backends.postgresql
        DATABASE_NAME=verihome_test
        DATABASE_USER=postgres
        DATABASE_PASSWORD=postgres
        DATABASE_HOST=localhost
        DATABASE_PORT=5432
        REDIS_URL=redis://localhost:6379
        EOF

    - name: Run migrations
      run: python manage.py migrate --noinput

    - name: Start Django server
      run: |
        python manage.py runserver 8000 &
        sleep 10

    - name: Run performance tests
      run: |
        locust -f performance_tests/locustfile.py --headless -u 10 -r 2 -t 60s --host=http://localhost:8000

  # Job 5: Build and Deploy (solo en main branch)
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, performance-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: staticfiles/frontend/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Django image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/verihome-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/verihome-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/verihome-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/verihome-frontend:${{ github.sha }}

    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment"
        # Aquí irían los comandos de deploy a staging

    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment"
        # Aquí irían los comandos de deploy a producción

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Job 6: Database Migration Check
  migration-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verihome_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        cat << EOF > .env
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        DATABASE_ENGINE=django.db.backends.postgresql
        DATABASE_NAME=verihome_test
        DATABASE_USER=postgres
        DATABASE_PASSWORD=postgres
        DATABASE_HOST=localhost
        DATABASE_PORT=5432
        EOF

    - name: Check for migration conflicts
      run: |
        python manage.py makemigrations --check --dry-run

    - name: Run migrations
      run: |
        python manage.py migrate --noinput

    - name: Check for missing migrations
      run: |
        python manage.py makemigrations --check

  # Job 7: Dependency Security Check
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Frontend dependency check
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high