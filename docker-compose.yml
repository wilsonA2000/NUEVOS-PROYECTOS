version: '3.8'

services:
  # =============================================================================
  # SERVICIO PRINCIPAL - DJANGO WEB APPLICATION
  # =============================================================================
  web:
    build: .
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-default-key-change-in-production}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DATABASE_NAME:-verihome}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,web,nginx}
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./logs:/app/logs
    networks:
      - verihome-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py create_superuser_if_not_exists &&
        gunicorn verihome.wsgi:application --bind 0.0.0.0:8000 --workers=3 --timeout=60"

  # =============================================================================
  # SERVICIO CELERY WORKER - TAREAS ASÍNCRONAS
  # =============================================================================
  celery-worker:
    build: .
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-default-key-change-in-production}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DATABASE_NAME:-verihome}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    networks:
      - verihome-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database and redis...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Celery worker...' &&
        celery -A verihome worker --loglevel=info --concurrency=2"

  # =============================================================================
  # SERVICIO CELERY BEAT - TAREAS PROGRAMADAS
  # =============================================================================
  celery-beat:
    build: .
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-default-key-change-in-production}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DATABASE_NAME:-verihome}
      - DATABASE_USER=${DATABASE_USER:-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    networks:
      - verihome-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database and redis...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Celery beat...' &&
        celery -A verihome beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"

  # =============================================================================
  # SERVICIO FLOWER - MONITOREO DE CELERY
  # =============================================================================
  flower:
    build: .
    ports:
      - "5555:5555"
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - verihome-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for redis...' &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Flower...' &&
        celery -A verihome flower --port=5555"

  # =============================================================================
  # SERVICIO NGINX - PROXY REVERSO Y ARCHIVOS ESTÁTICOS
  # =============================================================================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./ssl:/etc/nginx/ssl  # Para certificados SSL
    depends_on:
      - web
    networks:
      - verihome-network
    restart: unless-stopped

  # =============================================================================
  # SERVICIO POSTGRESQL - BASE DE DATOS
  # =============================================================================
  db:
    image: postgres:15-alpine
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-verihome}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    networks:
      - verihome-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-verihome}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # SERVICIO REDIS - CACHE Y BROKER CELERY
  # =============================================================================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - verihome-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # SERVICIO PGADMIN - ADMINISTRACIÓN DE BASE DE DATOS (DESARROLLO)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@verihome.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - verihome-network
    restart: unless-stopped

# =============================================================================
# REDES
# =============================================================================
networks:
  verihome-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLÚMENES PERSISTENTES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  pgadmin_data:
    driver: local 