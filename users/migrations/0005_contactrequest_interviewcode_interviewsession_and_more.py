# Generated by Django 4.2.7 on 2025-06-29 23:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0004_tenantprofile_currency_user_currency_and_more'),
    ]

    operations = [
        migrations.RunSQL("DROP TABLE IF EXISTS users_interviewcode;"),
        migrations.CreateModel(
            name='ContactRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200, verbose_name='Nombre Completo')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone', models.CharField(max_length=15, verbose_name='Teléfono')),
                ('interested_as', models.CharField(choices=[('landlord', 'Arrendador'), ('tenant', 'Arrendatario'), ('service_provider', 'Prestador de Servicios'), ('other', 'Otro')], default='other', max_length=20, verbose_name='Interesado como')),
                ('message', models.TextField(max_length=1000, verbose_name='Mensaje')),
                ('company_name', models.CharField(blank=True, max_length=200, verbose_name='Nombre de Empresa')),
                ('experience_years', models.PositiveIntegerField(blank=True, null=True, verbose_name='Años de Experiencia')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('contacted', 'Contactado'), ('interviewed', 'Entrevistado'), ('approved', 'Aprobado'), ('rejected', 'Rechazado'), ('closed', 'Cerrado')], default='pending', max_length=15, verbose_name='Estado')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Notas Internas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Solicitud')),
                ('contacted_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Contacto')),
                ('interviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Entrevista')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dirección IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('referrer', models.URLField(blank=True, verbose_name='Referrer')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_contacts', to=settings.AUTH_USER_MODEL, verbose_name='Asignado a')),
            ],
            options={
                'verbose_name': 'Solicitud de Contacto',
                'verbose_name_plural': 'Solicitudes de Contacto',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InterviewCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('interview_code', models.CharField(editable=False, help_text='Código único generado automáticamente', max_length=12, unique=True, verbose_name='Código de Entrevista')),
                ('candidate_name', models.CharField(max_length=200, verbose_name='Nombre del Candidato')),
                ('candidate_email', models.EmailField(max_length=254, verbose_name='Email del Candidato')),
                ('candidate_phone', models.CharField(blank=True, max_length=15, verbose_name='Teléfono del Candidato')),
                ('interview_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Entrevista')),
                ('interview_rating', models.IntegerField(blank=True, help_text='Calificación de 1 a 10 estrellas', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Calificación de Entrevista')),
                ('interview_notes', models.TextField(blank=True, verbose_name='Notas de Entrevista')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Aprobado')),
                ('approved_user_type', models.CharField(blank=True, choices=[('landlord', 'Arrendador'), ('tenant', 'Arrendatario'), ('service_provider', 'Prestador de Servicios')], help_text='Tipo de usuario para el que fue aprobado', max_length=20, verbose_name='Tipo de Usuario Aprobado')),
                ('status', models.CharField(choices=[('active', 'Activo'), ('used', 'Usado'), ('expired', 'Expirado'), ('revoked', 'Revocado')], default='active', max_length=10, verbose_name='Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('expires_at', models.DateTimeField(help_text='Fecha límite para usar el código', verbose_name='Fecha de Expiración')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Uso')),
                ('max_attempts', models.PositiveIntegerField(default=3, verbose_name='Máximo Intentos')),
                ('current_attempts', models.PositiveIntegerField(default=0, verbose_name='Intentos Actuales')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_interview_codes', to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_interview_codes', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
                ('registered_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_interview_code', to=settings.AUTH_USER_MODEL, verbose_name='Usuario Registrado')),
            ],
            options={
                'verbose_name': 'Código de Entrevista',
                'verbose_name_plural': 'Códigos de Entrevista',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InterviewSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scheduled_date', models.DateTimeField(verbose_name='Fecha Programada')),
                ('actual_start_time', models.DateTimeField(blank=True, null=True, verbose_name='Hora de Inicio Real')),
                ('actual_end_time', models.DateTimeField(blank=True, null=True, verbose_name='Hora de Finalización Real')),
                ('status', models.CharField(choices=[('scheduled', 'Programada'), ('in_progress', 'En Progreso'), ('completed', 'Completada'), ('cancelled', 'Cancelada'), ('rescheduled', 'Reprogramada')], default='scheduled', max_length=15, verbose_name='Estado')),
                ('final_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Calificación Final')),
                ('communication_skills', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Habilidades de Comunicación')),
                ('professionalism', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Profesionalismo')),
                ('experience_relevance', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Relevancia de Experiencia')),
                ('reliability_assessment', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Evaluación de Confiabilidad')),
                ('interview_notes', models.TextField(blank=True, verbose_name='Notas de Entrevista')),
                ('strengths', models.TextField(blank=True, verbose_name='Fortalezas')),
                ('concerns', models.TextField(blank=True, verbose_name='Preocupaciones')),
                ('recommendations', models.TextField(blank=True, verbose_name='Recomendaciones')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('contact_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interview_sessions', to='users.contactrequest', verbose_name='Solicitud de Contacto')),
                ('interviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_interviews', to=settings.AUTH_USER_MODEL, verbose_name='Entrevistador')),
            ],
            options={
                'verbose_name': 'Sesión de Entrevista',
                'verbose_name_plural': 'Sesiones de Entrevista',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.AddField(
            model_name='contactrequest',
            name='interview_code',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_request', to='users.interviewcode', verbose_name='Código de Entrevista'),
        ),
        migrations.AddIndex(
            model_name='interviewcode',
            index=models.Index(fields=['interview_code'], name='users_inter_intervi_9b929d_idx'),
        ),
        migrations.AddIndex(
            model_name='interviewcode',
            index=models.Index(fields=['status', 'expires_at'], name='users_inter_status_4df035_idx'),
        ),
        migrations.AddIndex(
            model_name='interviewcode',
            index=models.Index(fields=['candidate_email'], name='users_inter_candida_1d83b9_idx'),
        ),
        migrations.AddIndex(
            model_name='contactrequest',
            index=models.Index(fields=['status', 'created_at'], name='users_conta_status_b35bff_idx'),
        ),
        migrations.AddIndex(
            model_name='contactrequest',
            index=models.Index(fields=['email'], name='users_conta_email_442dff_idx'),
        ),
        migrations.AddIndex(
            model_name='contactrequest',
            index=models.Index(fields=['assigned_to', 'status'], name='users_conta_assigne_49d381_idx'),
        ),
    ]
