#!/usr/bin/env python3
"""
Script para verificar la integraci√≥n de modales de t√©rminos y condiciones
"""

import os
import sys
from pathlib import Path

def check_frontend_files():
    """Verificar que los archivos del frontend existen"""
    print("üîç Verificando archivos del frontend...")
    
    frontend_path = Path('frontend/src')
    required_files = [
        'components/modals/TermsModal.tsx',
        'components/modals/PrivacyModal.tsx',
        'components/modals/index.ts',
        'pages/auth/Register.tsx'
    ]
    
    all_exist = True
    for file_path in required_files:
        full_path = frontend_path / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - NO EXISTE")
            all_exist = False
    
    return all_exist

def check_backend_templates():
    """Verificar que las plantillas del backend existen"""
    print("\nüîç Verificando plantillas del backend...")
    
    templates_path = Path('templates')
    required_templates = [
        'core/terms.html',
        'core/privacy.html'
    ]
    
    all_exist = True
    for template_path in required_templates:
        full_path = templates_path / template_path
        if full_path.exists():
            print(f"‚úÖ {template_path}")
        else:
            print(f"‚ùå {template_path} - NO EXISTE")
            all_exist = False
    
    return all_exist

def check_register_templates():
    """Verificar plantillas de registro"""
    print("\nüîç Verificando plantillas de registro...")
    
    templates_path = Path('templates/users')
    register_templates = [
        'register_landlord.html',
        'register_tenant.html',
        'register_service_provider.html',
        'register_form.html'
    ]
    
    all_exist = True
    for template_path in register_templates:
        full_path = templates_path / template_path
        if full_path.exists():
            print(f"‚úÖ {template_path}")
        else:
            print(f"‚ùå {template_path} - NO EXISTE")
            all_exist = False
    
    return all_exist

def check_terms_links():
    """Verificar que los enlaces a t√©rminos est√°n presentes"""
    print("\nüîç Verificando enlaces a t√©rminos en plantillas...")
    
    templates_to_check = [
        'templates/users/register_landlord.html',
        'templates/users/register_tenant.html',
        'templates/users/register_service_provider.html',
        'templates/users/register_form.html'
    ]
    
    all_have_links = True
    for template_file in templates_to_check:
        if Path(template_file).exists():
            with open(template_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'T√©rminos y Condiciones' in content and 'Pol√≠tica de Privacidad' in content:
                    print(f"‚úÖ {template_file} - Enlaces presentes")
                else:
                    print(f"‚ö†Ô∏è {template_file} - Enlaces faltantes")
                    all_have_links = False
        else:
            print(f"‚ùå {template_file} - NO EXISTE")
            all_have_links = False
    
    return all_have_links

def check_frontend_components():
    """Verificar componentes del frontend"""
    print("\nüîç Verificando componentes del frontend...")
    
    register_file = Path('frontend/src/pages/auth/Register.tsx')
    if register_file.exists():
        with open(register_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        checks = [
            ('TermsModal import', 'import TermsModal from'),
            ('PrivacyModal import', 'import PrivacyModal from'),
            ('TermsModal component', '<TermsModal'),
            ('PrivacyModal component', '<PrivacyModal'),
            ('terms_accepted state', 'terms_accepted: false'),
            ('privacy_policy_accepted state', 'privacy_policy_accepted: false'),
            ('handleTermsAccept', 'handleTermsAccept'),
            ('handlePrivacyAccept', 'handlePrivacyAccept'),
            ('setTermsModalOpen', 'setTermsModalOpen'),
            ('setPrivacyModalOpen', 'setPrivacyModalOpen')
        ]
        
        all_checks_passed = True
        for check_name, check_text in checks:
            if check_text in content:
                print(f"‚úÖ {check_name}")
            else:
                print(f"‚ùå {check_name} - NO ENCONTRADO")
                all_checks_passed = False
        
        return all_checks_passed
    else:
        print(f"‚ùå {register_file} - NO EXISTE")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç Verificaci√≥n de Integraci√≥n - Modales de T√©rminos y Privacidad")
    print("=" * 70)
    
    # 1. Verificar archivos del frontend
    frontend_ok = check_frontend_files()
    
    # 2. Verificar plantillas del backend
    backend_ok = check_backend_templates()
    
    # 3. Verificar plantillas de registro
    register_ok = check_register_templates()
    
    # 4. Verificar enlaces en plantillas
    links_ok = check_terms_links()
    
    # 5. Verificar componentes del frontend
    components_ok = check_frontend_components()
    
    # Resumen
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE LA VERIFICACI√ìN")
    print("=" * 70)
    print(f"üì± Frontend Files: {'‚úÖ OK' if frontend_ok else '‚ùå FALLO'}")
    print(f"üîß Backend Templates: {'‚úÖ OK' if backend_ok else '‚ùå FALLO'}")
    print(f"üìù Register Templates: {'‚úÖ OK' if register_ok else '‚ùå FALLO'}")
    print(f"üîó Terms Links: {'‚úÖ OK' if links_ok else '‚ùå FALLO'}")
    print(f"‚öõÔ∏è Frontend Components: {'‚úÖ OK' if components_ok else '‚ùå FALLO'}")
    
    all_ok = frontend_ok and backend_ok and register_ok and links_ok and components_ok
    
    if all_ok:
        print("\nüéâ ¬°Integraci√≥n completada exitosamente!")
        print("\nüìã Funcionalidades implementadas:")
        print("‚úÖ Modales de t√©rminos y condiciones")
        print("‚úÖ Modal de pol√≠tica de privacidad (Ley 1581 de 2012)")
        print("‚úÖ Scroll obligatorio hasta el final")
        print("‚úÖ Bot√≥n de aceptar solo disponible despu√©s del scroll")
        print("‚úÖ Integraci√≥n en formulario de registro")
        print("‚úÖ Validaci√≥n de aceptaci√≥n obligatoria")
        print("‚úÖ Chips de confirmaci√≥n visual")
        print("‚úÖ Alertas informativas")
        
        print("\nüöÄ Pr√≥ximos pasos:")
        print("1. Ejecuta el frontend: npm run dev")
        print("2. Prueba el registro de un nuevo usuario")
        print("3. Verifica que los modales se abren correctamente")
        print("4. Confirma que el scroll es obligatorio")
        print("5. Prueba que el bot√≥n de aceptar funciona")
    else:
        print("\n‚ùå Hay problemas en la integraci√≥n")
        print("üîß Revisa los archivos faltantes o incorrectos")
    
    print("\nüìû Si necesitas ayuda:")
    print("- Verifica que todos los archivos est√©n en las ubicaciones correctas")
    print("- Aseg√∫rate de que las importaciones sean correctas")
    print("- Revisa que no haya errores de sintaxis")

if __name__ == '__main__':
    main() 