# =============================================================================
# VERIHOME - DOCKER COMPOSE OVERRIDE PARA DESARROLLO
# =============================================================================
# Configurado por Agent D para optimizar el desarrollo local
# Este archivo se aplica automÃ¡ticamente sobre docker-compose.yml

version: '3.8'

services:
  # =============================================================================
  # DESARROLLO - WEB SERVICE CON HOT RELOAD
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/frontend/node_modules  # Prevent overwriting node_modules
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=True
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=verihome.settings
    ports:
      - "8000:8000"  # Expose Django directly for development
    command: >
      sh -c "
        echo 'Starting development server...' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py create_superuser_if_not_exists &&
        python manage.py runserver 0.0.0.0:8000"

  # =============================================================================
  # DESARROLLO - CELERY WORKER CON AUTO-RELOAD
  # =============================================================================
  celery-worker:
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=verihome.settings
    command: >
      sh -c "
        echo 'Waiting for services...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Celery worker with auto-reload...' &&
        celery -A verihome worker --loglevel=debug --concurrency=2 --autoscale=4,1"

  # =============================================================================
  # DESARROLLO - CELERY BEAT CON AUTO-RELOAD
  # =============================================================================
  celery-beat:
    volumes:
      - .:/app
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=verihome.settings
    command: >
      sh -c "
        echo 'Waiting for services...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Celery beat...' &&
        celery -A verihome beat --loglevel=debug --scheduler django_celery_beat.schedulers:DatabaseScheduler"

  # =============================================================================
  # DESARROLLO - POSTGRESQL CON CONFIGURACION DE DESARROLLO
  # =============================================================================
  db:
    environment:
      - POSTGRES_DB=verihome
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"  # Expose PostgreSQL for external tools
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=0
      -c max_connections=200
      -c shared_preload_libraries=pg_stat_statements

  # =============================================================================
  # DESARROLLO - REDIS CON CONFIGURACION DE DESARROLLO
  # =============================================================================
  redis:
    ports:
      - "6379:6379"  # Expose Redis for external tools
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --loglevel debug
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

  # =============================================================================
  # DESARROLLO - NGINX CON CONFIGURACION SIMPLIFICADA
  # =============================================================================
  nginx:
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
    ports:
      - "80:80"
    depends_on:
      - web

  # =============================================================================
  # DESARROLLO - FLOWER CON CONFIGURACION EXTENDIDA
  # =============================================================================
  flower:
    volumes:
      - .:/app
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:admin123
    ports:
      - "5555:5555"
    command: >
      sh -c "
        echo 'Starting Flower with authentication...' &&
        celery -A verihome flower --port=5555 --basic_auth=admin:admin123"

  # =============================================================================
  # DESARROLLO - PGADMIN CON CONFIGURACION PRE-ESTABLECIDA
  # =============================================================================
  pgadmin:
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@verihome.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files:
  pgadmin_data: