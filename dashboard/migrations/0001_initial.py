# Generated by Django 4.2.7 on 2025-08-07 22:01

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('widget_type', models.CharField(choices=[('stats_overview', 'Resumen de Estadísticas'), ('financial_summary', 'Resumen Financiero'), ('property_summary', 'Resumen de Propiedades'), ('contract_summary', 'Resumen de Contratos'), ('rating_summary', 'Resumen de Calificaciones'), ('income_chart', 'Gráfico de Ingresos'), ('occupancy_chart', 'Gráfico de Ocupación'), ('trend_chart', 'Gráfico de Tendencias'), ('rating_chart', 'Gráfico de Calificaciones'), ('performance_chart', 'Gráfico de Rendimiento'), ('recent_activities', 'Actividades Recientes'), ('property_list', 'Lista de Propiedades'), ('contract_list', 'Lista de Contratos'), ('payment_list', 'Lista de Pagos'), ('tenant_list', 'Lista de Inquilinos'), ('notification_list', 'Notificaciones'), ('quick_actions', 'Acciones Rápidas'), ('calendar_widget', 'Calendario'), ('weather_widget', 'Clima'), ('map_widget', 'Mapa de Propiedades'), ('search_widget', 'Búsqueda Rápida'), ('match_requests', 'Solicitudes de Match'), ('property_performance', 'Rendimiento de Propiedades'), ('tenant_dashboard', 'Panel de Inquilino'), ('landlord_dashboard', 'Panel de Arrendador'), ('service_requests', 'Solicitudes de Servicio')], max_length=30, verbose_name='Tipo de Widget')),
                ('title', models.CharField(max_length=100, verbose_name='Título')),
                ('description', models.TextField(blank=True, max_length=300, verbose_name='Descripción')),
                ('size', models.CharField(choices=[('small', 'Pequeño (1x1)'), ('medium', 'Mediano (2x1)'), ('large', 'Grande (2x2)'), ('wide', 'Ancho (3x1)'), ('extra_large', 'Extra Grande (3x2)'), ('full_width', 'Ancho Completo (4x1)'), ('full_screen', 'Pantalla Completa (4x3)')], default='medium', max_length=20, verbose_name='Tamaño')),
                ('position_x', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)], verbose_name='Posición X')),
                ('position_y', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Posición Y')),
                ('width', models.PositiveIntegerField(default=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Ancho')),
                ('height', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Alto')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('refresh_interval', models.IntegerField(choices=[(0, 'Manual'), (30, '30 segundos'), (60, '1 minuto'), (300, '5 minutos'), (900, '15 minutos'), (1800, '30 minutos'), (3600, '1 hora')], default=300, verbose_name='Intervalo de actualización (segundos)')),
                ('data_source', models.CharField(blank=True, max_length=100, verbose_name='Fuente de datos')),
                ('filter_config', models.JSONField(blank=True, default=dict, verbose_name='Configuración de filtros')),
                ('color_scheme', models.CharField(default='default', max_length=20, verbose_name='Esquema de colores')),
                ('background_color', models.CharField(blank=True, max_length=20, verbose_name='Color de fondo')),
                ('text_color', models.CharField(blank=True, max_length=20, verbose_name='Color de texto')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('last_data_update', models.DateTimeField(blank=True, null=True, verbose_name='Última actualización de datos')),
            ],
            options={
                'verbose_name': 'Widget de Dashboard',
                'verbose_name_plural': 'Widgets de Dashboard',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserDashboardLayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layout_type', models.CharField(choices=[('default', 'Predeterminado'), ('compact', 'Compacto'), ('detailed', 'Detallado'), ('minimal', 'Minimalista'), ('custom', 'Personalizado')], default='default', max_length=20, verbose_name='Tipo de Layout')),
                ('layout_name', models.CharField(default='Mi Dashboard', max_length=100, verbose_name='Nombre del Layout')),
                ('grid_columns', models.PositiveIntegerField(default=4, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(6)], verbose_name='Columnas del grid')),
                ('grid_row_height', models.PositiveIntegerField(default=120, validators=[django.core.validators.MinValueValidator(80), django.core.validators.MaxValueValidator(200)], verbose_name='Altura de fila')),
                ('grid_margin', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(30)], verbose_name='Margen del grid')),
                ('dark_mode', models.BooleanField(default=False, verbose_name='Modo oscuro')),
                ('sidebar_collapsed', models.BooleanField(default=False, verbose_name='Sidebar colapsado')),
                ('show_welcome_widget', models.BooleanField(default=True, verbose_name='Mostrar widget de bienvenida')),
                ('auto_refresh_enabled', models.BooleanField(default=True, verbose_name='Auto-actualización habilitada')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('last_accessed', models.DateTimeField(blank=True, null=True, verbose_name='Último acceso')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_layout', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Layout de Dashboard',
                'verbose_name_plural': 'Layouts de Dashboard',
            },
        ),
        migrations.CreateModel(
            name='WidgetDataCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cached_data', models.JSONField(default=dict, verbose_name='Datos en cache')),
                ('cache_key', models.CharField(max_length=200, verbose_name='Clave de cache')),
                ('cache_version', models.CharField(default='1.0', max_length=50, verbose_name='Versión del cache')),
                ('data_source', models.CharField(blank=True, max_length=100, verbose_name='Fuente de datos')),
                ('query_parameters', models.JSONField(blank=True, default=dict, verbose_name='Parámetros de consulta')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('expires_at', models.DateTimeField(verbose_name='Fecha de expiración')),
                ('last_accessed', models.DateTimeField(blank=True, null=True, verbose_name='Último acceso')),
                ('access_count', models.PositiveIntegerField(default=0, verbose_name='Número de accesos')),
                ('data_size_bytes', models.PositiveIntegerField(default=0, verbose_name='Tamaño de datos (bytes)')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widget_cache', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
                ('widget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_cache', to='dashboard.dashboardwidget', verbose_name='Widget')),
            ],
            options={
                'verbose_name': 'Cache de Datos de Widget',
                'verbose_name_plural': 'Caches de Datos de Widgets',
            },
        ),
        migrations.CreateModel(
            name='UserWidgetConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Habilitado')),
                ('is_collapsed', models.BooleanField(default=False, verbose_name='Colapsado')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='Fijado')),
                ('custom_position_x', models.PositiveIntegerField(blank=True, null=True, verbose_name='Posición X personalizada')),
                ('custom_position_y', models.PositiveIntegerField(blank=True, null=True, verbose_name='Posición Y personalizada')),
                ('custom_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ancho personalizado')),
                ('custom_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Alto personalizado')),
                ('custom_title', models.CharField(blank=True, max_length=100, verbose_name='Título personalizado')),
                ('custom_config', models.JSONField(blank=True, default=dict, verbose_name='Configuración personalizada')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de agregado')),
                ('last_interacted', models.DateTimeField(blank=True, null=True, verbose_name='Última interacción')),
                ('user_layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.userdashboardlayout', verbose_name='Layout del usuario')),
                ('widget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.dashboardwidget', verbose_name='Widget')),
            ],
            options={
                'verbose_name': 'Configuración de Widget de Usuario',
                'verbose_name_plural': 'Configuraciones de Widgets de Usuario',
                'ordering': ['widget__order'],
            },
        ),
        migrations.AddField(
            model_name='userdashboardlayout',
            name='widgets',
            field=models.ManyToManyField(related_name='user_layouts', through='dashboard.UserWidgetConfig', to='dashboard.dashboardwidget', verbose_name='Widgets'),
        ),
        migrations.AddIndex(
            model_name='dashboardwidget',
            index=models.Index(fields=['widget_type', 'is_active'], name='dashboard_d_widget__18b215_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboardwidget',
            index=models.Index(fields=['order', 'position_y'], name='dashboard_d_order_d4891e_idx'),
        ),
        migrations.AddIndex(
            model_name='widgetdatacache',
            index=models.Index(fields=['cache_key', 'expires_at'], name='dashboard_w_cache_k_838073_idx'),
        ),
        migrations.AddIndex(
            model_name='widgetdatacache',
            index=models.Index(fields=['widget', 'expires_at'], name='dashboard_w_widget__d64375_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='widgetdatacache',
            unique_together={('widget', 'user', 'cache_key')},
        ),
        migrations.AlterUniqueTogether(
            name='userwidgetconfig',
            unique_together={('user_layout', 'widget')},
        ),
    ]
