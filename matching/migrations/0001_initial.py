# Generated by Django 4.2.7 on 2025-06-29 23:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('properties', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MatchAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='Fecha')),
                ('total_requests_created', models.PositiveIntegerField(default=0, verbose_name='Solicitudes creadas')),
                ('total_requests_viewed', models.PositiveIntegerField(default=0, verbose_name='Solicitudes vistas')),
                ('total_requests_accepted', models.PositiveIntegerField(default=0, verbose_name='Solicitudes aceptadas')),
                ('total_requests_rejected', models.PositiveIntegerField(default=0, verbose_name='Solicitudes rechazadas')),
                ('view_rate', models.FloatField(default=0.0, verbose_name='Tasa de visualización')),
                ('acceptance_rate', models.FloatField(default=0.0, verbose_name='Tasa de aceptación')),
                ('response_rate', models.FloatField(default=0.0, verbose_name='Tasa de respuesta')),
                ('avg_response_time_hours', models.FloatField(default=0.0, verbose_name='Tiempo promedio de respuesta (horas)')),
                ('avg_match_score', models.FloatField(default=0.0, verbose_name='Puntaje promedio de match')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
            ],
            options={
                'verbose_name': 'Analítica de Match',
                'verbose_name_plural': 'Analíticas de Match',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='MatchRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('match_code', models.CharField(editable=False, max_length=12, unique=True, verbose_name='Código de Match')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('viewed', 'Vista por Arrendador'), ('accepted', 'Aceptada'), ('rejected', 'Rechazada'), ('expired', 'Expirada'), ('cancelled', 'Cancelada')], default='pending', max_length=20, verbose_name='Estado')),
                ('priority', models.CharField(choices=[('low', 'Baja'), ('medium', 'Media'), ('high', 'Alta'), ('urgent', 'Urgente')], default='medium', max_length=10, verbose_name='Prioridad')),
                ('tenant_message', models.TextField(help_text='Mensaje personalizado del arrendatario al arrendador', max_length=1000, verbose_name='Mensaje del arrendatario')),
                ('tenant_phone', models.CharField(blank=True, max_length=15, verbose_name='Teléfono de contacto')),
                ('tenant_email', models.EmailField(blank=True, max_length=254, verbose_name='Email de contacto')),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Ingresos mensuales')),
                ('employment_type', models.CharField(blank=True, choices=[('employed', 'Empleado'), ('self_employed', 'Independiente'), ('freelancer', 'Freelancer'), ('student', 'Estudiante'), ('retired', 'Pensionado'), ('unemployed', 'Desempleado'), ('other', 'Otro')], max_length=50, verbose_name='Tipo de empleo')),
                ('preferred_move_in_date', models.DateField(blank=True, null=True, verbose_name='Fecha preferida de mudanza')),
                ('lease_duration_months', models.PositiveIntegerField(default=12, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='Duración deseada del contrato (meses)')),
                ('has_rental_references', models.BooleanField(default=False, verbose_name='Tiene referencias de alquiler')),
                ('has_employment_proof', models.BooleanField(default=False, verbose_name='Tiene comprobante de ingresos')),
                ('has_credit_check', models.BooleanField(default=False, verbose_name='Autoriza verificación crediticia')),
                ('number_of_occupants', models.PositiveIntegerField(default=1, verbose_name='Número de ocupantes')),
                ('has_pets', models.BooleanField(default=False, verbose_name='Tiene mascotas')),
                ('pet_details', models.TextField(blank=True, max_length=500, verbose_name='Detalles de mascotas')),
                ('smoking_allowed', models.BooleanField(default=False, verbose_name='Fumador')),
                ('landlord_response', models.TextField(blank=True, max_length=1000, verbose_name='Respuesta del arrendador')),
                ('landlord_notes', models.TextField(blank=True, max_length=500, verbose_name='Notas privadas del arrendador')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de solicitud')),
                ('viewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Vista por arrendador')),
                ('responded_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de respuesta')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de expiración')),
                ('follow_up_count', models.PositiveIntegerField(default=0, verbose_name='Número de seguimientos')),
                ('last_follow_up', models.DateTimeField(blank=True, null=True, verbose_name='Último seguimiento')),
                ('landlord', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_requests_received', to=settings.AUTH_USER_MODEL, verbose_name='Arrendador')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_requests', to='properties.property', verbose_name='Propiedad')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_requests_sent', to=settings.AUTH_USER_MODEL, verbose_name='Arrendatario')),
            ],
            options={
                'verbose_name': 'Solicitud de Match',
                'verbose_name_plural': 'Solicitudes de Match',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('new_match_found', 'Nuevo Match Encontrado'), ('match_request_received', 'Solicitud de Match Recibida'), ('match_accepted', 'Match Aceptado'), ('match_rejected', 'Match Rechazado'), ('match_expired', 'Match Expirado'), ('follow_up_reminder', 'Recordatorio de Seguimiento'), ('criteria_updated', 'Criterios Actualizados')], max_length=30, verbose_name='Tipo')),
                ('title', models.CharField(max_length=200, verbose_name='Título')),
                ('message', models.TextField(max_length=1000, verbose_name='Mensaje')),
                ('is_read', models.BooleanField(default=False, verbose_name='Leída')),
                ('is_sent', models.BooleanField(default=False, verbose_name='Enviada')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadatos')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de lectura')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de envío')),
                ('match_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='matching.matchrequest', verbose_name='Solicitud de Match')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Notificación de Match',
                'verbose_name_plural': 'Notificaciones de Match',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_cities', models.JSONField(blank=True, default=list, help_text='Lista de ciudades donde busca propiedad', verbose_name='Ciudades preferidas')),
                ('max_distance_km', models.PositiveIntegerField(default=10, help_text='Distancia máxima desde puntos de interés', verbose_name='Distancia máxima (km)')),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Precio mínimo')),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Precio máximo')),
                ('property_types', models.JSONField(blank=True, default=list, help_text='Tipos de propiedad de interés', verbose_name='Tipos de propiedad')),
                ('min_bedrooms', models.PositiveIntegerField(default=1, verbose_name='Mínimo dormitorios')),
                ('min_bathrooms', models.PositiveIntegerField(default=1, verbose_name='Mínimo baños')),
                ('min_area', models.PositiveIntegerField(blank=True, null=True, verbose_name='Área mínima (m²)')),
                ('required_amenities', models.JSONField(blank=True, default=list, help_text='Amenidades que debe tener la propiedad', verbose_name='Amenidades requeridas')),
                ('pets_required', models.BooleanField(default=False, verbose_name='Requiere que permitan mascotas')),
                ('smoking_required', models.BooleanField(default=False, verbose_name='Requiere que permitan fumar')),
                ('furnished_required', models.BooleanField(default=False, verbose_name='Requiere amueblado')),
                ('parking_required', models.BooleanField(default=False, verbose_name='Requiere estacionamiento')),
                ('auto_apply_enabled', models.BooleanField(default=False, verbose_name='Auto-aplicar a matches')),
                ('notification_frequency', models.CharField(choices=[('immediate', 'Inmediata'), ('daily', 'Diaria'), ('weekly', 'Semanal'), ('monthly', 'Mensual')], default='daily', max_length=20, verbose_name='Frecuencia de notificaciones')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('last_search', models.DateTimeField(blank=True, null=True, verbose_name='Última búsqueda')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='match_criteria', to=settings.AUTH_USER_MODEL, verbose_name='Arrendatario')),
            ],
            options={
                'verbose_name': 'Criterio de Match',
                'verbose_name_plural': 'Criterios de Match',
            },
        ),
        migrations.AddIndex(
            model_name='matchrequest',
            index=models.Index(fields=['status', 'created_at'], name='matching_ma_status_895201_idx'),
        ),
        migrations.AddIndex(
            model_name='matchrequest',
            index=models.Index(fields=['landlord', 'status'], name='matching_ma_landlor_139284_idx'),
        ),
        migrations.AddIndex(
            model_name='matchrequest',
            index=models.Index(fields=['tenant', 'created_at'], name='matching_ma_tenant__621501_idx'),
        ),
        migrations.AddIndex(
            model_name='matchnotification',
            index=models.Index(fields=['user', 'is_read', 'created_at'], name='matching_ma_user_id_9138d6_idx'),
        ),
        migrations.AddIndex(
            model_name='matchnotification',
            index=models.Index(fields=['notification_type', 'created_at'], name='matching_ma_notific_a75abb_idx'),
        ),
    ]
