import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Link,
  Alert,
  Grid,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
  SelectChangeEvent,
  FormControlLabel,
  Checkbox,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  OutlinedInput,
  FormHelperText,
  Divider,
  InputAdornment,
  IconButton,
  Tooltip,
  CircularProgress,
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
  Person as PersonIcon,
  LocationOn as LocationIcon,
  Work as WorkIcon,
  Home as HomeIcon,
  Business as BusinessIcon,
  Settings as SettingsIcon,
  Security as SecurityIcon,
  Check as CheckIcon,
  Error as ErrorIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { RegisterDto } from '../../types/user';
import { SuccessModal } from '../../components/SuccessModal';
import TermsModal from '../../components/modals/TermsModal';
import PrivacyModal from '../../components/modals/PrivacyModal';

interface InterviewCodeData {
  interview_code: string;
  candidate_name: string;
  candidate_email: string;
  approved_user_type: string;
  interview_rating: number;
  status: string;
  expires_at: string;
  is_approved: boolean;
}

export const RegisterWithCode: React.FC = () => {
  const navigate = useNavigate();
  const { register } = useAuth();
  
  // Estados del formulario
  const [formData, setFormData] = useState<RegisterDto>({
    email: '',
    password: '',
    first_name: '',
    last_name: '',
    user_type: 'tenant',
    phone_number: '',
    city: '',
    address: '',
    business_name: '',
    business_description: '',
    experience_years: 0,
    service_types: [],
    portfolio_urls: [],
    emergency_contact_name: '',
    emergency_contact_phone: '',
    profile_image: undefined,
    document_verification: {
      has_rut: false,
      has_cedula: false,
      has_references: false,
      has_certificates: false,
    },
    preferences: {
      notifications_email: true,
      notifications_push: true,
      marketing_emails: false,
    },
    terms_accepted: false,
    privacy_accepted: false,
  });

  // Estados para el c√≥digo de entrevista
  const [interviewCode, setInterviewCode] = useState('');
  const [codeValidating, setCodeValidating] = useState(false);
  const [codeValidation, setCodeValidation] = useState<{
    isValid: boolean;
    message: string;
    codeData?: InterviewCodeData;
  }>({ isValid: false, message: '' });

  // Estados generales
  const [error, setError] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showTermsModal, setShowTermsModal] = useState(false);
  const [showPrivacyModal, setShowPrivacyModal] = useState(false);

  // Validar c√≥digo de entrevista
  const validateInterviewCode = async (code: string) => {
    if (!code || code.length < 8) {
      setCodeValidation({ isValid: false, message: '' });
      return;
    }

    try {
      setCodeValidating(true);
      const response = await fetch('/api/v1/auth/validate-interview-code/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ interview_code: code })
      });

      const data = await response.json();

      if (response.ok && data.is_valid) {
        setCodeValidation({
          isValid: true,
          message: 'C√≥digo v√°lido',
          codeData: data.code_data
        });

        // Pre-llenar formulario con datos del c√≥digo
        if (data.code_data) {
          setFormData(prev => ({
            ...prev,
            email: data.code_data.candidate_email,
            user_type: data.code_data.approved_user_type,
            first_name: data.code_data.candidate_name.split(' ')[0] || '',
            last_name: data.code_data.candidate_name.split(' ').slice(1).join(' ') || '',
          }));
        }
      } else {
        // Mensajes espec√≠ficos seg√∫n el tipo de error
        let errorMessage = data.message || 'C√≥digo inv√°lido';
        
        if (response.status === 404) {
          errorMessage = '‚ùå C√≥digo no encontrado en el sistema';
        } else if (data.message?.includes('expirado')) {
          errorMessage = '‚è∞ El c√≥digo ha expirado';
        } else if (data.message?.includes('usado')) {
          errorMessage = 'üîí El c√≥digo ya fue utilizado';
        } else if (data.message?.includes('aprobado')) {
          errorMessage = '‚ö†Ô∏è El c√≥digo a√∫n no ha sido aprobado por el administrador';
        } else if (data.message?.includes('intentos')) {
          errorMessage = 'üö´ M√°ximo de intentos excedido';
        }
        
        setCodeValidation({
          isValid: false,
          message: errorMessage,
        });
      }
    } catch (error) {
      console.error('Error validating interview code:', error);
      setCodeValidation({
        isValid: false,
        message: 'üåê Error de conexi√≥n. Verifique su internet e intente nuevamente.',
      });
    } finally {
      setCodeValidating(false);
    }
  };

  // Debounce para el c√≥digo
  useEffect(() => {
    const timer = setTimeout(() => {
      if (interviewCode) {
        validateInterviewCode(interviewCode);
      }
    }, 500);

    return () => clearTimeout(timer);
  }, [interviewCode]);

  const handleInterviewCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.toUpperCase().replace(/[^A-Z0-9-]/g, '');
    setInterviewCode(value);
  };

  const formatCodeDisplay = (code: string) => {
    if (code.length <= 2) return code;
    if (code.length <= 7) return `${code.slice(0, 2)}-${code.slice(2)}`;
    return `${code.slice(0, 2)}-${code.slice(2, 6)}-${code.slice(6)}`;
  };

  const getUserTypeLabel = (userType: string) => {
    switch (userType) {
      case 'landlord': return 'Arrendador';
      case 'tenant': return 'Arrendatario';
      case 'service_provider': return 'Prestador de Servicios';
      default: return userType;
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
    setError('');
  };

  const handleSelectChange = (event: SelectChangeEvent<string>) => {
    const { name, value } = event.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    // Validaciones
    if (!codeValidation.isValid) {
      setError('Debe ingresar un c√≥digo de entrevista v√°lido');
      return;
    }

    if (!formData.terms_accepted || !formData.privacy_accepted) {
      setError('Debe aceptar los t√©rminos y condiciones y la pol√≠tica de privacidad');
      return;
    }

    if (!formData.email || !formData.password || !formData.first_name || !formData.last_name) {
      setError('Todos los campos obligatorios deben ser completados');
      return;
    }

    try {
      setIsLoading(true);

      // Incluir el c√≥digo de entrevista en el registro
      const registrationData = {
        ...formData,
        interview_code: interviewCode,
      };

      await register.mutateAsync(registrationData);
      setShowSuccess(true);
    } catch (err: any) {
      console.error('Error en registro:', err);
      
      if (err.response?.status === 400) {
        const errorData = err.response.data;
        if (errorData.email) {
          setError('Este email ya est√° registrado');
        } else if (errorData.interview_code) {
          setError('El c√≥digo de entrevista ha expirado o ya fue usado');
        } else {
          setError(errorData.message || 'Error en los datos del formulario');
        }
      } else if (err.response?.status === 429) {
        setError('Demasiados intentos. Por favor, espera un momento.');
      } else {
        setError('Error al crear la cuenta. Por favor, intenta nuevamente.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const getCodeValidationIcon = () => {
    if (codeValidating) return <CircularProgress size={20} />;
    if (codeValidation.isValid) return <CheckIcon color="success" />;
    if (codeValidation.message && !codeValidation.isValid) return <ErrorIcon color="error" />;
    return <SecurityIcon color="action" />;
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#f5f5f5',
        py: 4,
      }}
    >
      <Card sx={{ maxWidth: 800, width: '100%', mx: 2 }}>
        <CardContent sx={{ p: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom textAlign="center">
            Registro con C√≥digo de Entrevista
          </Typography>
          <Typography variant="body2" color="text.secondary" textAlign="center" sx={{ mb: 4 }}>
            Completa tu registro usando el c√≥digo √∫nico recibido despu√©s de tu entrevista
          </Typography>

          {/* Secci√≥n del c√≥digo de entrevista */}
          <Card sx={{ mb: 3, border: codeValidation.isValid ? '2px solid #4caf50' : '1px solid #e0e0e0', borderRadius: 2 }}>
            <CardContent sx={{ pb: 2 }}>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', color: 'text.primary' }}>
                <SecurityIcon sx={{ mr: 1, color: 'primary.main' }} />
                C√≥digo de Entrevista VeriHome
              </Typography>
              
              <TextField
                fullWidth
                label="C√≥digo de Entrevista"
                value={formatCodeDisplay(interviewCode)}
                onChange={handleInterviewCodeChange}
                error={codeValidation.message && !codeValidation.isValid}
                helperText={
                  codeValidation.message || 
                  'Ingrese el c√≥digo √∫nico proporcionado por VeriHome despu√©s de su entrevista'
                }
                placeholder="VH-XXXX-YYYY"
                inputProps={{
                  maxLength: 12,
                  style: { 
                    textTransform: 'uppercase',
                    fontSize: '1.1rem',
                    fontFamily: 'monospace',
                    letterSpacing: '0.1em'
                  }
                }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      {getCodeValidationIcon()}
                    </InputAdornment>
                  ),
                  endAdornment: (
                    <InputAdornment position="end">
                      <Tooltip title={
                        codeValidating ? "Validando c√≥digo..." :
                        codeValidation.isValid ? "C√≥digo v√°lido y verificado" :
                        interviewCode.length >= 8 ? "Haga clic para validar el c√≥digo" :
                        "Ingrese el c√≥digo completo para validar"
                      }>
                        <IconButton
                          onClick={() => validateInterviewCode(interviewCode)}
                          disabled={!interviewCode || codeValidating || interviewCode.length < 8}
                          size="small"
                          sx={{
                            color: codeValidation.isValid ? 'success.main' : 
                                   (interviewCode.length >= 8 ? 'primary.main' : 'action.disabled'),
                            '&:hover': {
                              backgroundColor: codeValidation.isValid ? 'success.light' : 'primary.light'
                            }
                          }}
                        >
                          {codeValidating ? (
                            <CircularProgress size={20} />
                          ) : codeValidation.isValid ? (
                            <CheckIcon />
                          ) : (
                            <SecurityIcon />
                          )}
                        </IconButton>
                      </Tooltip>
                    </InputAdornment>
                  )
                }}
                sx={{ mb: 2 }}
              />

              {/* Informaci√≥n del c√≥digo validado */}
              {codeValidation.isValid && codeValidation.codeData && (
                <Alert severity="success" sx={{ mb: 2 }}>
                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <CheckIcon color="success" />
                    C√≥digo Verificado Exitosamente
                  </Typography>
                  
                  <Box sx={{ mt: 2 }}>
                    <Typography variant="body2" gutterBottom>
                      <strong>üìù Candidato:</strong> {codeValidation.codeData.candidate_name}
                    </Typography>
                    <Typography variant="body2" gutterBottom>
                      <strong>üìß Email:</strong> {codeValidation.codeData.candidate_email}
                    </Typography>
                    <Typography variant="body2" gutterBottom>
                      <strong>üîê C√≥digo:</strong> {codeValidation.codeData.interview_code}
                    </Typography>
                    {codeValidation.codeData.expires_at && (
                      <Typography variant="body2" gutterBottom>
                        <strong>‚è∞ Expira:</strong> {new Date(codeValidation.codeData.expires_at).toLocaleDateString('es-ES')}
                      </Typography>
                    )}
                  </Box>
                  
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 2 }}>
                    <Chip
                      icon={<PersonIcon />}
                      label={`Tipo: ${getUserTypeLabel(codeValidation.codeData.approved_user_type)}`}
                      color="primary"
                      variant="filled"
                    />
                    {codeValidation.codeData.interview_rating && (
                      <Chip
                        icon={<CheckIcon />}
                        label={`Calificaci√≥n: ${'‚≠ê'.repeat(codeValidation.codeData.interview_rating)} (${codeValidation.codeData.interview_rating}/10)`}
                        color="success"
                        variant="filled"
                      />
                    )}
                    <Chip
                      icon={<SecurityIcon />}
                      label={`Estado: ${codeValidation.codeData.status || 'Activo'}`}
                      color="info"
                      variant="outlined"
                    />
                    {codeValidation.codeData.is_approved && (
                      <Chip
                        icon={<CheckIcon />}
                        label="Aprobado por Administrador"
                        color="success"
                        variant="outlined"
                      />
                    )}
                  </Box>
                  
                  <Box sx={{ mt: 2, p: 2, bgcolor: 'success.light', borderRadius: 1, border: '1px solid', borderColor: 'success.main' }}>
                    <Typography variant="body2" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
                      ‚úÖ C√≥digo v√°lido y verificado contra la base de datos
                    </Typography>
                    <Typography variant="caption" sx={{ color: 'success.dark' }}>
                      Este c√≥digo fue generado autom√°ticamente por el panel de administraci√≥n de Django 
                      y est√° asociado al correo electr√≥nico del candidato.
                    </Typography>
                  </Box>
                </Alert>
              )}
              
              {/* Informaci√≥n cuando el c√≥digo no es v√°lido */}
              {codeValidation.message && !codeValidation.isValid && interviewCode.length >= 8 && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <ErrorIcon color="error" />
                    C√≥digo No V√°lido
                  </Typography>
                  
                  <Typography variant="body2" gutterBottom>
                    {codeValidation.message}
                  </Typography>
                  
                  <Box sx={{ mt: 2, p: 2, bgcolor: 'error.light', borderRadius: 1, border: '1px solid', borderColor: 'error.main' }}>
                    <Typography variant="body2" sx={{ color: 'error.dark', fontWeight: 'bold', mb: 1 }}>
                      üîç Verificaciones realizadas:
                    </Typography>
                    <Typography variant="caption" sx={{ color: 'error.dark', display: 'block' }}>
                      ‚úì Formato de c√≥digo verificado<br/>
                      ‚úì Consulta en base de datos realizada<br/>
                      ‚úì Validaci√≥n contra correo electr√≥nico del candidato<br/>
                      ‚úì Verificaci√≥n de estado de aprobaci√≥n del administrador
                    </Typography>
                  </Box>
                  
                  <Divider sx={{ my: 2 }} />
                  
                  <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
                    üìã Pasos a seguir:
                  </Typography>
                  <Typography variant="body2" component="ul" sx={{ pl: 2 }}>
                    <li>Verifique que el c√≥digo est√© escrito correctamente</li>
                    <li>Aseg√∫rese de usar el c√≥digo m√°s reciente recibido</li>
                    <li>Contacte al administrador si el problema persiste</li>
                    <li>Verifique que el c√≥digo no haya expirado</li>
                  </Typography>
                </Alert>
              )}
              
              {/* Informaci√≥n para c√≥digos incompletos */}
              {interviewCode.length > 0 && interviewCode.length < 8 && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  <Typography variant="body2">
                    üìù Ingrese el c√≥digo completo (formato: VH-XXXX-YYYY)
                  </Typography>
                  <Typography variant="caption">
                    El c√≥digo debe tener al menos 8 caracteres para poder validarlo.
                  </Typography>
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* Formulario de registro - Solo se muestra si el c√≥digo es v√°lido */}
          {codeValidation.isValid && (
            <form onSubmit={handleSubmit}>
              {error && (
                <Alert severity="error" sx={{ mb: 3 }}>
                  {error}
                </Alert>
              )}

              {/* Informaci√≥n Personal */}
              <Accordion defaultExpanded>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="h6">
                    <PersonIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    Informaci√≥n Personal
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="Nombre"
                        name="first_name"
                        value={formData.first_name}
                        onChange={handleChange}
                        required
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="Apellido"
                        name="last_name"
                        value={formData.last_name}
                        onChange={handleChange}
                        required
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="Email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleChange}
                        required
                        disabled // Pre-llenado por el c√≥digo
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="Tel√©fono"
                        name="phone_number"
                        value={formData.phone_number}
                        onChange={handleChange}
                        required
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="Contrase√±a"
                        name="password"
                        type="password"
                        value={formData.password}
                        onChange={handleChange}
                        required
                        helperText="M√≠nimo 8 caracteres"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <FormControl fullWidth>
                        <InputLabel>Tipo de Usuario</InputLabel>
                        <Select
                          name="user_type"
                          value={formData.user_type}
                          onChange={handleSelectChange}
                          label="Tipo de Usuario"
                          disabled // Pre-determinado por el c√≥digo
                        >
                          <MenuItem value="landlord">Arrendador</MenuItem>
                          <MenuItem value="tenant">Arrendatario</MenuItem>
                          <MenuItem value="service_provider">Prestador de Servicios</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>

              {/* Informaci√≥n de Ubicaci√≥n */}
              <Accordion sx={{ mt: 2 }}>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="h6">
                    <LocationIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    Ubicaci√≥n
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="Ciudad"
                        name="city"
                        value={formData.city}
                        onChange={handleChange}
                        required
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField
                        fullWidth
                        label="Direcci√≥n"
                        name="address"
                        value={formData.address}
                        onChange={handleChange}
                        multiline
                        rows={2}
                      />
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>

              {/* T√©rminos y Condiciones */}
              <Box sx={{ mt: 4 }}>
                <FormControlLabel
                  control={
                    <Checkbox
                      name="terms_accepted"
                      checked={formData.terms_accepted}
                      onChange={handleChange}
                      required
                    />
                  }
                  label={
                    <Typography variant="body2">
                      Acepto los{' '}
                      <Link
                        component="button"
                        type="button"
                        onClick={() => setShowTermsModal(true)}
                        sx={{ textDecoration: 'underline', cursor: 'pointer' }}
                      >
                        t√©rminos y condiciones
                      </Link>
                    </Typography>
                  }
                />
                <FormControlLabel
                  control={
                    <Checkbox
                      name="privacy_accepted"
                      checked={formData.privacy_accepted}
                      onChange={handleChange}
                      required
                    />
                  }
                  label={
                    <Typography variant="body2">
                      Acepto la{' '}
                      <Link
                        component="button"
                        type="button"
                        onClick={() => setShowPrivacyModal(true)}
                        sx={{ textDecoration: 'underline', cursor: 'pointer' }}
                      >
                        pol√≠tica de privacidad
                      </Link>
                    </Typography>
                  }
                />
              </Box>

              <Button
                type="submit"
                fullWidth
                variant="contained"
                size="large"
                disabled={isLoading || !codeValidation.isValid}
                sx={{ mt: 3, py: 1.5 }}
              >
                {isLoading ? 'Creando cuenta...' : 'Crear cuenta'}
              </Button>
            </form>
          )}

          {/* Enlace al login */}
          <Box sx={{ textAlign: 'center', mt: 3 }}>
            <Typography variant="body2">
              ¬øYa tienes una cuenta?{' '}
              <Link component={RouterLink} to="/login">
                Inicia sesi√≥n aqu√≠
              </Link>
            </Typography>
          </Box>

          {/* Informaci√≥n para usuarios sin c√≥digo */}
          {!interviewCode && (
            <Alert severity="info" sx={{ mt: 3 }}>
              <Typography variant="body2">
                <strong>¬øNo tienes un c√≥digo de entrevista?</strong><br />
                Primero debes contactarnos y completar una entrevista. 
                El c√≥digo ser√° enviado por correo electr√≥nico si eres aprobado.
              </Typography>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Modales */}
      <SuccessModal
        open={showSuccess}
        onClose={() => {
          setShowSuccess(false);
          navigate('/login', {
            state: {
              message: 'Cuenta creada exitosamente. Se ha enviado un correo de confirmaci√≥n.'
            }
          });
        }}
        title="¬°Cuenta creada exitosamente!"
        message="Se ha enviado un correo de confirmaci√≥n a tu email. Por favor, verifica tu cuenta para poder iniciar sesi√≥n."
      />

      <TermsModal
        open={showTermsModal}
        onClose={() => setShowTermsModal(false)}
      />

      <PrivacyModal
        open={showPrivacyModal}
        onClose={() => setShowPrivacyModal(false)}
      />
    </Box>
  );
};