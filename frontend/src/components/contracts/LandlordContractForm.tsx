/**
 * LandlordContractForm - Nuevo sistema de contratos controlado por arrendador
 * Reemplaza ProfessionalContractForm con el sistema avanzado implementado
 * Integraci√≥n completa con workflow biom√©trico y gesti√≥n profesional
 */

import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardHeader,
  Chip,
  Grid,
  IconButton,
  InputAdornment,
  MenuItem,
  Paper,
  Select,
  Step,
  StepContent,
  StepLabel,
  Stepper,
  TextField,
  Typography,
  Alert,
  FormControl,
  InputLabel,
  FormControlLabel,
  Switch,
  Autocomplete,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Tooltip,
  Divider,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import {
  Assignment as ContractIcon,
  Preview as PreviewIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Person as PersonIcon,
  Home as PropertyIcon,
  AttachMoney as MoneyIcon,
  DateRange as DateIcon,
  Security as SecurityIcon,
  Warning as WarningIcon,
  CheckCircle as CheckIcon,
  ExpandMore as ExpandMoreIcon,
  Send as SendIcon,
  AutoAwesome as TemplateIcon,
  Gavel as LegalIcon,
  Edit as EditIcon,
  AccountBalance as BankIcon,
  Business as BusinessIcon,
  Visibility as VisibilityIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { LoadingButton } from '@mui/lab';

// Services y hooks del nuevo sistema
import { LandlordContractService } from '../../services/landlordContractService';
import { propertyService } from '../../services/propertyService';
import { useAuth } from '../../hooks/useAuth';
import { useProperties } from '../../hooks/useProperties';

// Types del nuevo sistema
import {
  LandlordControlledContractData,
  ContractWorkflowState, 
  PropertyType,
  DocumentType,
  LandlordData,
  CreateContractPayload
} from '../../types/landlordContract';

// Utilidades
import { format, addMonths, differenceInMonths } from 'date-fns';
import { es } from 'date-fns/locale';

// Templates de contratos profesionales
const PROFESSIONAL_CONTRACT_TEMPLATES = {
  residential_urban: {
    title: 'Vivienda Urbana - Ley 820 de 2003',
    description: 'Contrato est√°ndar para vivienda urbana seg√∫n normativa colombiana',
    icon: <PropertyIcon />,
    color: 'primary' as const,
    property_types: ['apartamento', 'casa'] as PropertyType[],
    recommended_duration: 12,
    clauses: [
      'Objeto del contrato y destinaci√≥n del inmueble',
      'Canon de arrendamiento y forma de pago', 
      'Duraci√≥n del contrato y renovaci√≥n',
      'Dep√≥sito de garant√≠a y seguros',
      'Obligaciones del arrendador',
      'Obligaciones del arrendatario',
      'Servicios p√∫blicos domiciliarios',
      'Causales de terminaci√≥n',
      'Cl√°usula de permanencia m√≠nima',
      'Reformas y mejoras al inmueble'
    ]
  },
  commercial_premises: {
    title: 'Local Comercial - C√≥digo de Comercio',
    description: 'Contrato para locales comerciales y oficinas',
    icon: <BusinessIcon />,
    color: 'secondary' as const,
    property_types: ['local_comercial', 'oficina'] as PropertyType[],
    recommended_duration: 36,
    clauses: [
      'Objeto y destinaci√≥n comercial espec√≠fica',
      'Canon comercial y incrementos anuales',
      'Duraci√≥n y renovaci√≥n autom√°tica',
      'Garant√≠as comerciales y seguros',
      'Obligaciones espec√≠ficas comerciales',
      'Uso de marca y publicidad exterior',
      'Adecuaciones y mejoras locativas',
      'Administraci√≥n y gastos comunes',
      'Horarios de funcionamiento',
      'Transferencia y cesi√≥n del contrato'
    ]
  },
  warehouse_storage: {
    title: 'Bodega y Almacenamiento',
    description: 'Contrato especializado para bodegas industriales',
    icon: <BusinessIcon />,
    color: 'warning' as const,
    property_types: ['bodega'] as PropertyType[],
    recommended_duration: 24,
    clauses: [
      'Especificaciones t√©cnicas de la bodega',
      'Capacidad de carga y restricciones',
      'Seguridad industrial y protocolos',
      'Manejo de mercanc√≠as peligrosas',
      'Seguros obligatorios especializados',
      'Acceso de veh√≠culos pesados',
      'Mantenimiento de instalaciones',
      'Responsabilidad por da√±os'
    ]
  },
  rural_farm: {
    title: 'Finca Rural - C√≥digo Rural',
    description: 'Contrato para propiedades rurales y fincas',
    icon: <PropertyIcon />,
    color: 'success' as const,
    property_types: ['finca'] as PropertyType[],
    recommended_duration: 60,
    clauses: [
      'Descripci√≥n detallada del predio rural',
      'Uso agr√≠cola, ganadero o tur√≠stico',
      'Servicios rurales y acceso a v√≠as',
      'Manejo ambiental y sostenibilidad',
      'Seguridad rural y vigilancia',
      'Mantenimiento de cercas y caminos',
      'Derechos de agua y riego',
      'Cultivos existentes y nuevos'
    ]
  }
};

// Configuraciones por tipo de propiedad
const PROPERTY_CONFIGURATIONS = {
  apartamento: {
    deposit_months: [1, 2],
    typical_duration: [6, 12, 24],
    included_services: ['agua', 'luz', 'gas', 'internet', 'tv_cable', 'administracion'],
    common_clauses: ['no_mascotas', 'no_fiestas', 'horario_visitas']
  },
  casa: {
    deposit_months: [1, 2, 3],
    typical_duration: [12, 24, 36],
    included_services: ['agua', 'luz', 'gas', 'internet', 'jardineria', 'vigilancia'],
    common_clauses: ['mantenimiento_jardin', 'uso_piscina', 'mascotas_permitidas']
  },
  local_comercial: {
    deposit_months: [2, 3, 6],
    typical_duration: [12, 24, 36, 60],
    included_services: ['agua', 'luz', 'gas', 'internet', 'administracion', 'seguridad'],
    common_clauses: ['horario_comercial', 'publicidad_exterior', 'adecuaciones_permitidas']
  },
  oficina: {
    deposit_months: [1, 2, 3],
    typical_duration: [12, 24, 36],
    included_services: ['agua', 'luz', 'internet', 'administracion', 'seguridad', 'parqueadero'],
    common_clauses: ['horario_oficina', 'reunion_clientes', 'equipos_oficina']
  }
};

interface LandlordContractFormProps {
  propertyId?: string;
  isEdit?: boolean;
  contractId?: string;
  onSuccess?: (contract: LandlordControlledContractData) => void;
  onCancel?: () => void;
}

export const LandlordContractForm: React.FC<LandlordContractFormProps> = ({
  propertyId,
  isEdit = false,
  contractId,
  onSuccess,
  onCancel
}) => {
  const navigate = useNavigate();
  const { user, isAuthenticated } = useAuth();
  // Obtener par√°metros de query string
  const [searchParams] = React.useState(() => new URLSearchParams(window.location.search));
  const queryPropertyId = searchParams.get('property');
  
  const { data: allProperties = [], isLoading: propertiesLoading, error: propertiesError } = useProperties();
  
  // Hook adicional para cargar propiedad espec√≠fica si viene del workflow
  const { data: specificProperty, isLoading: specificPropertyLoading } = useQuery({
    queryKey: ['property', queryPropertyId],
    queryFn: async () => {
      if (!queryPropertyId) return null;
      console.log('üîç Cargando propiedad espec√≠fica:', queryPropertyId);
      // Usar el propertyService para mantener consistencia con el resto de la app
      const data = await propertyService.getProperty(queryPropertyId);
      console.log('‚úÖ Propiedad espec√≠fica cargada:', data);
      return data;
    },
    enabled: !!queryPropertyId && allProperties.length === 0,
  });
  const queryTenantId = searchParams.get('tenant');
  
  // Usar propertyId del prop o del query string
  const effectivePropertyId = propertyId || queryPropertyId;
  
  // Filtrar solo propiedades del usuario actual que est√©n disponibles
  const properties = React.useMemo(() => {
    // Combinar allProperties con specificProperty si est√° disponible
    let combinedProperties = [...(allProperties || [])];
    
    // Si tenemos una propiedad espec√≠fica del workflow y no est√° en allProperties, agregarla
    if (specificProperty && !combinedProperties.find(p => p.id === specificProperty.id)) {
      if (process.env.NODE_ENV === 'development') {
        console.log('üîÑ Agregando propiedad espec√≠fica del workflow:', specificProperty.title || specificProperty.id);
      }
      combinedProperties = [specificProperty, ...combinedProperties];
    }
    
    // Early returns si no tenemos datos necesarios
    if (!combinedProperties || !Array.isArray(combinedProperties)) {
      console.log('‚ö†Ô∏è useProperties: combinedProperties no disponible o no es array', combinedProperties);
      return [];
    }
    
    if (!user || !user.id) {
      console.log('‚ö†Ô∏è useProperties: user no disponible', user);
      return [];
    }
    
    if (combinedProperties.length === 0) {
      console.log('‚ö†Ô∏è useProperties: combinedProperties est√° vac√≠o');
      return [];
    }
    
    // Reduced logging - only log summary info once 
    const shouldLogDebug = process.env.NODE_ENV === 'development' && combinedProperties.length > 0;
    
    // Aplicar filtro menos restrictivo
    const filteredProperties = combinedProperties.filter(property => {
      if (!property) return false;
      
      // Verificar ownership con m√∫ltiples fallbacks - M√ÅS PERMISIVO
      const isOwner = (
        // Direct landlord comparison (string)
        (typeof property.landlord === 'string' && property.landlord === user.id) ||
        // Landlord object with id
        (property.landlord && typeof property.landlord === 'object' && property.landlord.id === user.id) ||
        // Landlord object with email fallback
        (property.landlord && typeof property.landlord === 'object' && property.landlord.email === user.email) ||
        // Fallback to owner field
        (property.owner === user.id) ||
        // Si el usuario es arrendador y no hay landlord definido, incluir
        (user.user_type === 'landlord' && !property.landlord)
      );
      
      // Verificar availability - M√ÅS PERMISIVO
      const isAvailable = (
        property.is_available === true ||
        property.is_available === 'true' ||
        !property.status || 
        property.status === 'available' || 
        property.status === 'AVAILABLE' ||
        property.status === 'disponible' ||
        property.status === 'active' ||
        property.status === 'ACTIVE' ||
        property.status === 'published' ||
        property.status === 'PUBLISHED'
      );
      
      // Para debugging, incluir TODAS las propiedades si el usuario es arrendador
      const shouldInclude = user.user_type === 'landlord' ? true : (isOwner && isAvailable);
      
      // Removed per-property logging to prevent spam
      
      return shouldInclude;
    });
    
    // Only log summary once when there are significant changes
    if (shouldLogDebug && filteredProperties.length === 0 && combinedProperties.length > 0) {
      console.log(`‚ö†Ô∏è No properties available after filtering: ${combinedProperties.length} total properties`);
    }
    
    // Si no hay propiedades despu√©s del filtro, mostrar advertencia
    if (filteredProperties.length === 0 && combinedProperties.length > 0) {
      console.warn('‚ö†Ô∏è ADVERTENCIA: No hay propiedades disponibles despu√©s del filtro. Revise los criterios de filtrado.');
    }
    
    return filteredProperties;
  }, [allProperties, specificProperty, user]);

  // Form state
  const [activeStep, setActiveStep] = useState(0);
  const [selectedTemplate, setSelectedTemplate] = useState<keyof typeof PROFESSIONAL_CONTRACT_TEMPLATES>('residential_urban');
  const [previewMode, setPreviewMode] = useState(false);
  const [contractPreviewMode, setContractPreviewMode] = useState(false);
  const [contractDraftContent, setContractDraftContent] = useState('');
  const [contractHasBeenPreviewed, setContractHasBeenPreviewed] = useState(false);
  const [loading, setLoading] = useState(false);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);

  // Contract data state
  const [contractData, setContractData] = useState<Partial<LandlordControlledContractData>>({
    current_state: 'DRAFT',
    property_id: propertyId || '',
    property_type: 'apartamento',
    monthly_rent: 0,
    security_deposit: 0,
    contract_duration_months: 12,
    rent_increase_type: 'ipc',
    payment_day: 5,
    utilities_included: false,
    internet_included: false,
    pets_allowed: false,
    smoking_allowed: false,
    guests_policy: 'limited',
    max_occupants: 2,
    guarantor_required: true,
    guarantor_type: 'personal',
    maintenance_responsibility: 'tenant',
    utilities_responsibility: 'tenant',
    insurance_responsibility: 'tenant',
    special_clauses: [],
    landlord_approved: false,
    tenant_approved: false,
    landlord_signed: false,
    tenant_signed: false,
    published: false,
    workflow_history: []
  });

  // Landlord data state
  const [landlordData, setLandlordData] = useState<LandlordData>({
    full_name: user?.full_name || '',
    document_type: 'CC',
    document_number: '',
    phone: user?.phone || '',
    email: user?.email || '',
    address: '',
    city: 'Medell√≠n',
    department: 'Antioquia',
    country: 'Colombia',
    emergency_contact: '',
    emergency_phone: '',
    bank_account: '',
    bank_name: '',
    account_type: 'savings',
    profession: ''
  });

  // Property details state
  const [propertyData, setPropertyData] = useState({
    property_id: effectivePropertyId || '',
    property_address: '',
    property_area: 0,
    property_stratum: 3,
    property_rooms: 2,
    property_bathrooms: 2,
    property_parking_spaces: 1,
    property_furnished: false
  });

  const steps = [
    'Informaci√≥n del Arrendador',
    'Detalles de la Propiedad', 
    'Condiciones Econ√≥micas',
    'T√©rminos del Contrato',
    'Cl√°usulas Especiales',
    'Revisi√≥n y Creaci√≥n'
  ];

  // Actualizar propertyId en propertyData cuando cambie el prop
  useEffect(() => {
    if (effectivePropertyId && effectivePropertyId !== propertyData.property_id) {
      console.log('üè† Estableciendo propiedad desde par√°metros:', effectivePropertyId);
      
      // Auto-seleccionar la propiedad si est√° disponible
      const selectedProperty = properties.find(p => p.id === effectivePropertyId) || 
                              (specificProperty?.id === effectivePropertyId ? specificProperty : null);
      
      if (selectedProperty) {
        console.log('üéØ Auto-llenando datos de propiedad:', selectedProperty.title || selectedProperty.id);
        handlePropertySelect(effectivePropertyId);
      } else {
        // Si no se encuentra en properties, solo actualizar el ID
        console.log('üîÑ Propiedad no encontrada en lista, esperando carga...');
        setPropertyData(prev => ({ ...prev, property_id: effectivePropertyId }));
      }
    }
  }, [effectivePropertyId, properties, specificProperty]);

  // Trigger auto-population when specificProperty loads
  useEffect(() => {
    if (specificProperty && effectivePropertyId === specificProperty.id && !propertyData.property_address) {
      console.log('üéØ Auto-llenando desde propiedad espec√≠fica cargada:', specificProperty.title);
      handlePropertySelect(specificProperty.id);
    }
  }, [specificProperty, effectivePropertyId, propertyData.property_address]);

  // Handle property selection - AUTO-FILL DATA FROM PROPERTY MODEL
  const handlePropertySelect = (selectedPropertyId: string) => {
    // Find property from multiple sources
    const selectedProperty = properties.find(p => p.id === selectedPropertyId) || 
                            specificProperty?.id === selectedPropertyId ? specificProperty : null;
    
    if (selectedProperty) {
      console.log('üéØ Auto-llenando datos de propiedad completos:', selectedProperty);
      
      // Build complete address string with all available location data
      const fullAddress = [
        selectedProperty.address,
        selectedProperty.city,
        selectedProperty.state,
        selectedProperty.country
      ].filter(Boolean).join(', ');
      
      // Map property type from English to Spanish
      const propertyTypeMapping: Record<string, string> = {
        'apartment': 'apartamento',
        'house': 'casa', 
        'studio': 'apartamento',
        'penthouse': 'apartamento',
        'townhouse': 'casa',
        'commercial': 'local_comercial',
        'office': 'oficina',
        'warehouse': 'bodega',
        'land': 'lote',
        'room': 'habitacion'
      };
      
      // Update property data with comprehensive mapping from Property model
      const newPropertyData = {
        property_id: selectedProperty.id,
        property_address: fullAddress || selectedProperty.address || '',
        property_area: Number(selectedProperty.total_area) || Number(selectedProperty.area) || 0,
        property_stratum: selectedProperty.stratum || selectedProperty.floor_number || 3,
        property_rooms: Number(selectedProperty.bedrooms) || 0,
        property_bathrooms: Number(selectedProperty.bathrooms) || 0,
        property_parking_spaces: Number(selectedProperty.parking_spaces) || 0,
        property_furnished: Boolean(selectedProperty.furnished)
      };
      
      setPropertyData(newPropertyData);
      
      // Update contract data with comprehensive auto-filled values
      setContractData(prev => ({
        ...prev,
        property_type: propertyTypeMapping[selectedProperty.property_type] || selectedProperty.property_type || 'apartamento',
        property_id: selectedProperty.id,
        // Auto-fill financial data
        monthly_rent: prev.monthly_rent || Number(selectedProperty.rent_price) || 0,
        security_deposit: prev.security_deposit || Number(selectedProperty.security_deposit) || (Number(selectedProperty.rent_price) || 0),
        // Auto-fill property policies
        pets_allowed: Boolean(selectedProperty.pets_allowed),
        smoking_allowed: Boolean(selectedProperty.smoking_allowed),
        // Auto-fill lease terms
        contract_duration_months: Number(selectedProperty.minimum_lease_term) || 12,
        utilities_included: Array.isArray(selectedProperty.utilities_included) && selectedProperty.utilities_included.length > 0,
        // Auto-fill occupancy based on bedrooms
        max_occupants: Number(selectedProperty.bedrooms) || 2,
        // Auto-fill additional details
        utilities_responsibility: selectedProperty.utilities_included?.length > 0 ? 'landlord' : 'tenant',
        internet_included: selectedProperty.utilities_included?.includes('internet') || false
      }));
      
      console.log('‚úÖ Datos completos auto-llenados desde propiedad:', {
        id: selectedProperty.id,
        title: selectedProperty.title,
        address: fullAddress,
        area: selectedProperty.total_area,
        bedrooms: selectedProperty.bedrooms,
        bathrooms: selectedProperty.bathrooms,
        parking: selectedProperty.parking_spaces,
        furnished: selectedProperty.furnished,
        pets: selectedProperty.pets_allowed,
        smoking: selectedProperty.smoking_allowed,
        lease_term: selectedProperty.minimum_lease_term,
        rent_price: selectedProperty.rent_price,
        security_deposit: selectedProperty.security_deposit,
        utilities: selectedProperty.utilities_included,
        features: selectedProperty.property_features,
        amenities: selectedProperty.nearby_amenities
      });
    } else {
      console.warn('‚ö†Ô∏è No se encontr√≥ la propiedad con ID:', selectedPropertyId);
    }
  };

  // Cargar datos si es edici√≥n
  useEffect(() => {
    if (isEdit && contractId) {
      loadContractData();
    }
  }, [isEdit, contractId]);

  const loadContractData = async () => {
    if (!contractId) return;
    
    try {
      setLoading(true);
      const contract = await LandlordContractService.getContract(contractId);
      setContractData(contract);
      if (contract.landlord_data) {
        setLandlordData(contract.landlord_data);
      }
    } catch (error) {
      console.error('Error al cargar contrato:', error);
    } finally {
      setLoading(false);
    }
  };

  const validateCurrentStep = (): boolean => {
    const errors: string[] = [];

    switch (activeStep) {
      case 0: // Informaci√≥n del Arrendador
        if (!landlordData.full_name) errors.push('El nombre completo es requerido');
        if (!landlordData.document_number) errors.push('El n√∫mero de documento es requerido');
        if (!landlordData.phone) errors.push('El tel√©fono es requerido');
        if (!landlordData.email) errors.push('El email es requerido');
        if (!landlordData.address) errors.push('La direcci√≥n es requerida');
        if (!landlordData.city) errors.push('La ciudad es requerida');
        break;

      case 1: // Detalles de la Propiedad
        if (!propertyData.property_id) errors.push('Debe seleccionar una propiedad');
        if (!propertyData.property_address) errors.push('La direcci√≥n de la propiedad es requerida');
        if (!propertyData.property_area || propertyData.property_area <= 0) errors.push('El √°rea debe ser mayor a 0');
        if (!contractData.property_type) errors.push('El tipo de propiedad es requerido');
        break;

      case 2: // Condiciones Econ√≥micas
        if (!contractData.monthly_rent || contractData.monthly_rent <= 0) errors.push('El canon mensual debe ser mayor a 0');
        if (!contractData.security_deposit || contractData.security_deposit < 0) errors.push('El dep√≥sito de garant√≠a debe ser mayor o igual a 0');
        if (!contractData.contract_duration_months || contractData.contract_duration_months <= 0) errors.push('La duraci√≥n debe ser mayor a 0');
        break;

      case 3: // T√©rminos del Contrato
        if (!contractData.payment_day || contractData.payment_day < 1 || contractData.payment_day > 31) {
          errors.push('El d√≠a de pago debe estar entre 1 y 31');
        }
        break;

      case 4: // Cl√°usulas Especiales - opcional
        break;

      case 5: // Revisi√≥n final
        // Validar todo
        if (!landlordData.full_name || !landlordData.document_number || !propertyData.property_address || 
            !contractData.monthly_rent || contractData.monthly_rent <= 0) {
          errors.push('Hay campos requeridos sin completar en pasos anteriores');
        }
        break;
    }

    setValidationErrors(errors);
    return errors.length === 0;
  };

  const handleNext = () => {
    if (validateCurrentStep()) {
      setActiveStep(prev => Math.min(prev + 1, steps.length - 1));
    }
  };

  const handleBack = () => {
    setActiveStep(prev => Math.max(prev - 1, 0));
  };

  const handleSubmit = async () => {
    if (!validateCurrentStep()) return;

    try {
      setLoading(true);

      let result: LandlordControlledContractData;

      if (isEdit && contractId) {
        // Para editar, enviar datos completos
        const completeContractData: Partial<LandlordControlledContractData> = {
          ...contractData,
          ...propertyData,
          landlord_data: landlordData,
        };
        result = await LandlordContractService.updateContractDraft(contractId, completeContractData);
      } else {
        // Para crear, usar el payload simplificado
        const createPayload: CreateContractPayload = {
          property_id: propertyData.property_id || '',
          contract_template: contractData.contract_template || 'rental_urban',
          basic_terms: {
            monthly_rent: contractData.monthly_rent || 0,
            security_deposit: contractData.security_deposit || 0,
            duration_months: contractData.contract_duration_months || 12,
            utilities_included: contractData.utilities_included || false,
            pets_allowed: contractData.pets_allowed || false,
            smoking_allowed: contractData.smoking_allowed || false,
          },
          // Incluir el contenido del contrato editado si est√° disponible
          contract_content: contractDraftContent || generateContractPreview()
        };
        
        console.log('üìù FORM DATA DEBUG:', {
          propertyData,
          contractData,
          createPayload,
          user
        });
        
        result = await LandlordContractService.createContractDraft(createPayload);
      }

      console.log('‚úÖ Contrato creado exitosamente:', result);
      
      // SINCRONIZACI√ìN WORKFLOW: Actualizar PropertyInterestRequest si viene del workflow
      const queryMatchId = searchParams.get('match');
      if (queryMatchId && result?.id) {
        try {
          console.log('üîÑ Sincronizando workflow - Match ID:', queryMatchId);
          
          // Llamar endpoint para actualizar el workflow
          const workflowResponse = await fetch('/api/v1/contracts/workflow-action/', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('token')}`,
            },
            body: JSON.stringify({
              match_request_id: queryMatchId,
              action: 'contract_created',
              contract_data: {
                contract_id: result.id,
                created_at: new Date().toISOString()
              }
            })
          });
          
          if (workflowResponse.ok) {
            const workflowResult = await workflowResponse.json();
            console.log('‚úÖ Workflow sincronizado correctamente:', workflowResult);
          } else {
            console.warn('‚ö†Ô∏è Advertencia: No se pudo sincronizar el workflow');
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Error en sincronizaci√≥n del workflow:', error);
        }
      }

      if (onSuccess) {
        onSuccess(result);
      } else {
        // Navigate to contract detail view to continue workflow (signature, authentication, publication)
        if (result.id) {
          navigate(`/app/contracts/landlord/${result.id}`);
        } else {
          // Fallback to contracts dashboard
          navigate('/app/contracts/landlord');
        }
      }

    } catch (error) {
      console.error('Error al guardar contrato:', error);
      setValidationErrors(['Error al guardar el contrato. Por favor intenta nuevamente.']);
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    if (onCancel) {
      onCancel();
    } else {
      navigate('/app/contracts/landlord');
    }
  };

  const generateContractPreview = () => {
    const currentDate = new Date().toLocaleDateString('es-CO', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    // Template base legal profesional para vivienda urbana
    const contractContent = `
# CONTRATO DE ARRENDAMIENTO DE VIVIENDA URBANA

**Conforme a la Ley 820 de 2003 del R√©gimen de Arrendamiento de Vivienda Urbana**

---

**FECHA DE SUSCRIPCI√ìN:** ${currentDate}

**LUGAR DE SUSCRIPCI√ìN:** ${landlordData.city}, ${landlordData.department}

---

## IDENTIFICACI√ìN DE LAS PARTES

### ARRENDADOR (PRIMERA PARTE)
- **Nombre completo:** ${landlordData.full_name}
- **Documento de identidad:** ${landlordData.document_type} No. ${landlordData.document_number}
- **Tel√©fono:** ${landlordData.phone}
- **Correo electr√≥nico:** ${landlordData.email}
- **Direcci√≥n de notificaciones:** ${landlordData.address}, ${landlordData.city}, ${landlordData.department}

### ARRENDATARIO (SEGUNDA PARTE)
**[Los datos del arrendatario se completar√°n cuando acepte la invitaci√≥n]**

### INMUEBLE OBJETO DEL CONTRATO
- **Direcci√≥n:** ${propertyData.property_address}
- **Tipo de inmueble:** ${contractData.property_type}
- **√Årea construida:** ${propertyData.property_area} metros cuadrados
- **N√∫mero de habitaciones:** ${propertyData.property_rooms}
- **N√∫mero de ba√±os:** ${propertyData.property_bathrooms}
- **Parqueaderos:** ${propertyData.property_parking_spaces}
- **Estado del inmueble:** ${propertyData.property_furnished ? 'Amoblado' : 'Sin amoblar'}

---

## CL√ÅUSULAS CONTRACTUALES

### PRIMERA - OBJETO DEL CONTRATO
EL ARRENDADOR entrega en arrendamiento al ARRENDATARIO el inmueble identificado anteriormente, quien lo destinar√° exclusivamente para **vivienda familiar**, de conformidad con lo establecido en el art√≠culo 3¬∞ de la Ley 820 de 2003.

### SEGUNDA - CANON DE ARRENDAMIENTO
El canon mensual de arrendamiento es de **$${contractData.monthly_rent?.toLocaleString('es-CO')} PESOS COLOMBIANOS** (${contractData.monthly_rent ? new Intl.NumberFormat('es-CO').format(contractData.monthly_rent) : 'N/A'}), que deber√° ser cancelado por EL ARRENDATARIO dentro de los primeros **${contractData.payment_day || 5}** d√≠as de cada mes.

### TERCERA - DEP√ìSITO EN DINERO
EL ARRENDATARIO entregar√° al ARRENDADOR la suma de **$${contractData.security_deposit?.toLocaleString('es-CO')} PESOS COLOMBIANOS** como dep√≥sito en dinero, conforme al art√≠culo 19 de la Ley 820 de 2003, equivalente a ${contractData.security_deposit && contractData.monthly_rent ? Math.round((contractData.security_deposit / contractData.monthly_rent) * 10) / 10 : 'N/A'} meses de canon.

### CUARTA - DURACI√ìN DEL CONTRATO
El t√©rmino de duraci√≥n del presente contrato es de **${contractData.contract_duration_months} MESES**, contados a partir de la fecha de entrega del inmueble. El contrato se prorrogar√° autom√°ticamente por per√≠odos iguales, salvo manifestaci√≥n en contrario de cualquiera de las partes con una antelaci√≥n m√≠nima de tres (3) meses.

### QUINTA - INCREMENTO DEL CANON
El canon de arrendamiento se reajustar√° anualmente en una proporci√≥n igual al incremento del √çndice de Precios al Consumidor (IPC) certificado por el DANE, conforme al art√≠culo 20 de la Ley 820 de 2003.

### SEXTA - SERVICIOS P√öBLICOS
Los servicios p√∫blicos domiciliarios (energ√≠a, acueducto, alcantarillado, aseo, gas y telecomunicaciones) ${contractData.utilities_included ? 'est√°n incluidos en el canon de arrendamiento' : 'estar√°n a cargo del ARRENDATARIO'} y deber√°n cancelarse oportunamente.

### S√âPTIMA - OBLIGACIONES DEL ARRENDATARIO
1. Pagar puntualmente el canon de arrendamiento y los servicios p√∫blicos.
2. Destinar el inmueble exclusivamente para vivienda familiar.
3. Conservar el inmueble en buen estado y restituirlo en las mismas condiciones.
4. Permitir inspecciones del inmueble, previa cita acordada.
5. No realizar modificaciones sin autorizaci√≥n escrita del ARRENDADOR.
6. ${contractData.pets_allowed ? 'Cumplir las normas de tenencia responsable de mascotas.' : 'No introducir mascotas en el inmueble.'}
7. ${contractData.smoking_allowed ? 'Fumar √∫nicamente en √°reas ventiladas.' : 'Abstenerse de fumar dentro del inmueble.'}
8. No exceder el n√∫mero m√°ximo de ${contractData.max_occupants || 4} ocupantes.

### OCTAVA - OBLIGACIONES DEL ARRENDADOR
1. Entregar el inmueble en condiciones de habitabilidad.
2. Mantener el inmueble en estado adecuado para la habitaci√≥n.
3. Realizar las reparaciones necesarias por deterioro natural.
4. Respetar el derecho del ARRENDATARIO al goce pac√≠fico del inmueble.
5. Cumplir con las obligaciones establecidas en la Ley 820 de 2003.

### NOVENA - REPARACIONES LOCATIVAS
Las reparaciones locativas estar√°n a cargo del ${contractData.maintenance_responsibility === 'tenant' ? 'ARRENDATARIO' : contractData.maintenance_responsibility === 'landlord' ? 'ARRENDADOR' : 'ARRENDATARIO para reparaciones menores y del ARRENDADOR para reparaciones mayores'}, conforme a lo establecido en los art√≠culos 2029 y 2030 del C√≥digo Civil.

### D√âCIMA - TERMINACI√ìN DEL CONTRATO
El contrato terminar√° por las causales previstas en el art√≠culo 22 de la Ley 820 de 2003, y por mutuo acuerdo entre las partes.

### D√âCIMA PRIMERA - RESTITUCI√ìN DEL INMUEBLE
Al terminar el contrato, EL ARRENDATARIO deber√° restituir el inmueble en las mismas condiciones en que lo recibi√≥, salvo el deterioro natural por el uso adecuado.

${contractData.guarantor_required ? `
### D√âCIMA SEGUNDA - CODEUDOR
El presente contrato cuenta con codeudor solidario, cuya informaci√≥n se completar√° en el proceso de formalizaci√≥n.` : ''}

${contractData.special_clauses && contractData.special_clauses.length > 0 ? `
### CL√ÅUSULAS ADICIONALES
${contractData.special_clauses.map((clause, index) => `**${index + 1}.** ${clause}`).join('\n')}` : ''}

---

## FIRMAS

En constancia de lo anterior, se firma el presente contrato en la fecha indicada.

**EL ARRENDADOR**

_____________________________
${landlordData.full_name}
${landlordData.document_type} ${landlordData.document_number}


**EL ARRENDATARIO**

_____________________________
[Se completar√° con firma biom√©trica digital]

${contractData.guarantor_required ? `
**EL CODEUDOR**

_____________________________
[Se completar√° en el proceso de formalizaci√≥n]` : ''}

---

## INFORMACI√ìN LEGAL

- **Marco legal:** Ley 820 de 2003, C√≥digo Civil Colombiano
- **Jurisdicci√≥n:** Rep√∫blica de Colombia
- **Estado del documento:** BORRADOR DIGITAL
- **Sistema:** VeriHome - Plataforma Digital de Arrendamiento
- **Fecha de generaci√≥n:** ${currentDate}

---

*Este contrato cumple con la normatividad colombiana vigente para arrendamiento de vivienda urbana. Ha sido generado digitalmente y ser√° perfeccionado mediante firmas biom√©tricas de las partes.*
    `;

    return contractContent;
  };

  const handleContractPreview = () => {
    if (!validateCurrentStep()) {
      setValidationErrors(['Complete todos los campos requeridos antes de ver la previsualizaci√≥n del contrato']);
      return;
    }
    
    const content = generateContractPreview();
    setContractDraftContent(content);
    setContractHasBeenPreviewed(true);
    setContractPreviewMode(true);
  };

  const handleSaveContractChanges = () => {
    // Aqu√≠ podr√≠as implementar l√≥gica adicional para parsear cambios del contenido editado
    // Por ahora solo cerramos el modal manteniendo los cambios
    setContractPreviewMode(false);
    
    // Mostrar confirmaci√≥n
    setTimeout(() => {
      alert('‚úÖ Los cambios en el borrador del contrato han sido guardados. Puede continuar con la creaci√≥n.');
    }, 200);
  };

  const getRecommendedDeposit = (): number => {
    if (!contractData.property_type || !contractData.monthly_rent) return 0;
    
    const config = PROPERTY_CONFIGURATIONS[contractData.property_type];
    const recommendedMonths = config?.deposit_months[0] || 1;
    
    return contractData.monthly_rent * recommendedMonths;
  };

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0: // Informaci√≥n del Arrendador
        return (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom color="primary">
                <PersonIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Informaci√≥n del Arrendador
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Proporciona la informaci√≥n legal del propietario que aparecer√° en el contrato
              </Typography>
            </Grid>

            <Grid item xs={12} md={8}>
              <TextField
                fullWidth
                label="Nombre Completo *"
                value={landlordData.full_name}
                onChange={(e) => setLandlordData(prev => ({ ...prev, full_name: e.target.value }))}
                error={validationErrors.some(err => err.includes('nombre'))}
                helperText="Nombre completo como aparece en el documento de identidad"
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>Tipo de Documento</InputLabel>
                <Select
                  value={landlordData.document_type}
                  onChange={(e) => setLandlordData(prev => ({ ...prev, document_type: e.target.value as DocumentType }))}
                  label="Tipo de Documento"
                >
                  <MenuItem value="CC">C√©dula de Ciudadan√≠a</MenuItem>
                  <MenuItem value="CE">C√©dula de Extranjer√≠a</MenuItem>
                  <MenuItem value="PP">Pasaporte</MenuItem>
                  <MenuItem value="NI">NIT</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="N√∫mero de Documento *"
                value={landlordData.document_number}
                onChange={(e) => setLandlordData(prev => ({ ...prev, document_number: e.target.value }))}
                error={validationErrors.some(err => err.includes('documento'))}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Tel√©fono *"
                value={landlordData.phone}
                onChange={(e) => setLandlordData(prev => ({ ...prev, phone: e.target.value }))}
                error={validationErrors.some(err => err.includes('tel√©fono'))}
                placeholder="+57 300 123 4567"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Email *"
                type="email"
                value={landlordData.email}
                onChange={(e) => setLandlordData(prev => ({ ...prev, email: e.target.value }))}
                error={validationErrors.some(err => err.includes('email'))}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Profesi√≥n"
                value={landlordData.profession}
                onChange={(e) => setLandlordData(prev => ({ ...prev, profession: e.target.value }))}
                placeholder="Ej: Ingeniero, M√©dico, Empresario"
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Direcci√≥n de Residencia *"
                value={landlordData.address}
                onChange={(e) => setLandlordData(prev => ({ ...prev, address: e.target.value }))}
                error={validationErrors.some(err => err.includes('direcci√≥n'))}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Ciudad *"
                value={landlordData.city}
                onChange={(e) => setLandlordData(prev => ({ ...prev, city: e.target.value }))}
                error={validationErrors.some(err => err.includes('ciudad'))}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Departamento"
                value={landlordData.department}
                onChange={(e) => setLandlordData(prev => ({ ...prev, department: e.target.value }))}
              />
            </Grid>

            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="subtitle1" gutterBottom>
                Contacto de Emergencia
              </Typography>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Nombre del Contacto de Emergencia"
                value={landlordData.emergency_contact}
                onChange={(e) => setLandlordData(prev => ({ ...prev, emergency_contact: e.target.value }))}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Tel√©fono de Emergencia"
                value={landlordData.emergency_phone}
                onChange={(e) => setLandlordData(prev => ({ ...prev, emergency_phone: e.target.value }))}
              />
            </Grid>
          </Grid>
        );

      case 1: // Detalles de la Propiedad
        return (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom color="primary">
                <PropertyIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Detalles de la Propiedad
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Especifica las caracter√≠sticas de la propiedad a arrendar
              </Typography>
            </Grid>
            
            {/* Selected Property Display */}
            {effectivePropertyId && (
              <Grid item xs={12}>
                {(() => {
                  const selectedProperty = properties.find(p => p.id === effectivePropertyId) || specificProperty;
                  
                  if (!selectedProperty) {
                    return (
                      <Card variant="outlined" sx={{ p: 2, bgcolor: 'warning.light', borderColor: 'warning.main' }}>
                        <Box display="flex" alignItems="center" gap={1} mb={1}>
                          <WarningIcon color="warning" />
                          <Typography variant="h6" color="warning.main">
                            Propiedad Preseleccionada
                          </Typography>
                        </Box>
                        <Typography variant="body2" color="text.secondary">
                          Cargando informaci√≥n de la propiedad...
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          Esta propiedad fue seleccionada autom√°ticamente desde la solicitud de inter√©s.
                        </Typography>
                      </Card>
                    );
                  }

                  return (
                    <Card variant="outlined" sx={{ p: 3, bgcolor: 'success.50', borderColor: 'success.main', border: 2 }}>
                      <Box display="flex" alignItems="center" gap={1} mb={2}>
                        <CheckIcon color="success" />
                        <Typography variant="h6" color="success.main">
                          Propiedad Preseleccionada para Contrato
                        </Typography>
                      </Box>
                      
                      {/* Property Header */}
                      <Box sx={{ mb: 3, p: 2, bgcolor: 'primary.50', borderRadius: 1 }}>
                        <Typography variant="h6" fontWeight="bold" color="primary" gutterBottom>
                          üè† {selectedProperty.title || `${selectedProperty.property_type} - ${selectedProperty.city}`}
                        </Typography>
                        <Typography variant="body1" color="text.secondary" gutterBottom>
                          üìç {selectedProperty.address}, {selectedProperty.city}, {selectedProperty.state}, {selectedProperty.country}
                        </Typography>
                        {selectedProperty.description && (
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            üìù {selectedProperty.description.substring(0, 200)}{selectedProperty.description.length > 200 ? '...' : ''}
                          </Typography>
                        )}
                      </Box>
                      
                      {/* Property Details Grid */}
                      <Grid container spacing={2} sx={{ mb: 2 }}>
                        {/* Basic Details */}
                        <Grid item xs={12} sm={6} md={3}>
                          <Paper sx={{ p: 1.5, textAlign: 'center', bgcolor: 'grey.50' }}>
                            <Typography variant="caption" color="text.secondary">√Årea Total</Typography>
                            <Typography variant="h6" fontWeight="bold" color="primary">
                              üìê {selectedProperty.total_area || selectedProperty.area || 'N/A'} m¬≤
                            </Typography>
                          </Paper>
                        </Grid>
                        
                        <Grid item xs={12} sm={6} md={3}>
                          <Paper sx={{ p: 1.5, textAlign: 'center', bgcolor: 'grey.50' }}>
                            <Typography variant="caption" color="text.secondary">Habitaciones</Typography>
                            <Typography variant="h6" fontWeight="bold" color="primary">
                              üõèÔ∏è {selectedProperty.bedrooms || 'N/A'}
                            </Typography>
                          </Paper>
                        </Grid>
                        
                        <Grid item xs={12} sm={6} md={3}>
                          <Paper sx={{ p: 1.5, textAlign: 'center', bgcolor: 'grey.50' }}>
                            <Typography variant="caption" color="text.secondary">Ba√±os</Typography>
                            <Typography variant="h6" fontWeight="bold" color="primary">
                              üöø {selectedProperty.bathrooms || 'N/A'}
                            </Typography>
                          </Paper>
                        </Grid>
                        
                        <Grid item xs={12} sm={6} md={3}>
                          <Paper sx={{ p: 1.5, textAlign: 'center', bgcolor: 'grey.50' }}>
                            <Typography variant="caption" color="text.secondary">Parqueaderos</Typography>
                            <Typography variant="h6" fontWeight="bold" color="primary">
                              üöó {selectedProperty.parking_spaces || 'N/A'}
                            </Typography>
                          </Paper>
                        </Grid>
                      </Grid>
                      
                      {/* Additional Details */}
                      <Grid container spacing={2} sx={{ mb: 2 }}>
                        {selectedProperty.built_area && (
                          <Grid item xs={12} sm={4}>
                            <Typography variant="caption" color="text.secondary">√Årea Construida</Typography>
                            <Typography variant="body2" fontWeight="medium">
                              üèóÔ∏è {selectedProperty.built_area} m¬≤
                            </Typography>
                          </Grid>
                        )}
                        
                        {selectedProperty.floors && (
                          <Grid item xs={12} sm={4}>
                            <Typography variant="caption" color="text.secondary">Pisos</Typography>
                            <Typography variant="body2" fontWeight="medium">
                              üè¢ {selectedProperty.floors} {selectedProperty.floors === 1 ? 'piso' : 'pisos'}
                            </Typography>
                          </Grid>
                        )}
                        
                        {selectedProperty.floor_number && (
                          <Grid item xs={12} sm={4}>
                            <Typography variant="caption" color="text.secondary">Piso #</Typography>
                            <Typography variant="body2" fontWeight="medium">
                              üìç Piso {selectedProperty.floor_number}
                            </Typography>
                          </Grid>
                        )}
                        
                        {selectedProperty.year_built && (
                          <Grid item xs={12} sm={4}>
                            <Typography variant="caption" color="text.secondary">A√±o de Construcci√≥n</Typography>
                            <Typography variant="body2" fontWeight="medium">
                              üóìÔ∏è {selectedProperty.year_built}
                            </Typography>
                          </Grid>
                        )}
                        
                        {selectedProperty.half_bathrooms > 0 && (
                          <Grid item xs={12} sm={4}>
                            <Typography variant="caption" color="text.secondary">Medios Ba√±os</Typography>
                            <Typography variant="body2" fontWeight="medium">
                              üöΩ {selectedProperty.half_bathrooms}
                            </Typography>
                          </Grid>
                        )}
                      </Grid>
                      
                      {/* Financial Information */}
                      <Grid container spacing={2} sx={{ mb: 2 }}>
                        {selectedProperty.rent_price && (
                          <Grid item xs={12} sm={6} md={4}>
                            <Paper sx={{ p: 1.5, bgcolor: 'success.50', border: '1px solid', borderColor: 'success.200' }}>
                              <Typography variant="caption" color="success.dark">Precio de Renta</Typography>
                              <Typography variant="h6" fontWeight="bold" color="success.main">
                                üí∞ ${Number(selectedProperty.rent_price).toLocaleString()} COP/mes
                              </Typography>
                            </Paper>
                          </Grid>
                        )}
                        
                        {selectedProperty.security_deposit && (
                          <Grid item xs={12} sm={6} md={4}>
                            <Paper sx={{ p: 1.5, bgcolor: 'info.50', border: '1px solid', borderColor: 'info.200' }}>
                              <Typography variant="caption" color="info.dark">Dep√≥sito de Garant√≠a</Typography>
                              <Typography variant="h6" fontWeight="bold" color="info.main">
                                üè¶ ${Number(selectedProperty.security_deposit).toLocaleString()} COP
                              </Typography>
                            </Paper>
                          </Grid>
                        )}
                        
                        {selectedProperty.maintenance_fee && (
                          <Grid item xs={12} sm={6} md={4}>
                            <Paper sx={{ p: 1.5, bgcolor: 'warning.50', border: '1px solid', borderColor: 'warning.200' }}>
                              <Typography variant="caption" color="warning.dark">Administraci√≥n</Typography>
                              <Typography variant="h6" fontWeight="bold" color="warning.main">
                                üè¢ ${Number(selectedProperty.maintenance_fee).toLocaleString()} COP/mes
                              </Typography>
                            </Paper>
                          </Grid>
                        )}
                      </Grid>
                      
                      {/* Property Policies & Features */}
                      <Grid container spacing={2} sx={{ mb: 2 }}>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="caption" color="text.secondary" gutterBottom>Pol√≠ticas de la Propiedad</Typography>
                          <Box display="flex" gap={1} flexWrap="wrap">
                            {selectedProperty.furnished && (
                              <Chip label="ü™ë Amoblado" size="small" color="info" />
                            )}
                            {selectedProperty.pets_allowed && (
                              <Chip label="üêï Mascotas Permitidas" size="small" color="success" />
                            )}
                            {selectedProperty.smoking_allowed && (
                              <Chip label="üö¨ Fumadores Permitidos" size="small" color="warning" />
                            )}
                            {selectedProperty.minimum_lease_term && (
                              <Chip label={`üìÖ Min. ${selectedProperty.minimum_lease_term} meses`} size="small" color="primary" />
                            )}
                          </Box>
                        </Grid>
                        
                        <Grid item xs={12} sm={6}>
                          <Typography variant="caption" color="text.secondary" gutterBottom>Servicios Incluidos</Typography>
                          <Box display="flex" gap={1} flexWrap="wrap">
                            {(Array.isArray(selectedProperty.utilities_included) ? selectedProperty.utilities_included : [])?.map((utility, index) => (
                              <Chip key={index} label={`‚ö° ${utility}`} size="small" color="secondary" />
                            )) || <Typography variant="caption" color="text.secondary">No especificados</Typography>}
                          </Box>
                        </Grid>
                      </Grid>
                      
                      {/* Property Features */}
                      {selectedProperty.property_features && selectedProperty.property_features.length > 0 && (
                        <Box sx={{ mb: 2 }}>
                          <Typography variant="caption" color="text.secondary" gutterBottom>Caracter√≠sticas Especiales</Typography>
                          <Box display="flex" gap={1} flexWrap="wrap" mt={0.5}>
                            {selectedProperty.property_features.slice(0, 6).map((feature, index) => (
                              <Chip key={index} label={`‚ú® ${feature}`} size="small" variant="outlined" />
                            ))}
                            {selectedProperty.property_features.length > 6 && (
                              <Chip label={`+${selectedProperty.property_features.length - 6} m√°s`} size="small" variant="outlined" />
                            )}
                          </Box>
                        </Box>
                      )}
                      
                      <Alert severity="success" sx={{ mt: 2 }}>
                        <Typography variant="body2">
                          ‚úÖ <strong>Datos Auto-Cargados:</strong> Toda la informaci√≥n de esta propiedad ha sido transferida autom√°ticamente 
                          al formulario del contrato. Verifica los datos en los campos de abajo y modifica lo que sea necesario antes de continuar.
                        </Typography>
                      </Alert>
                    </Card>
                  );
                })()}
              </Grid>
            )}
            
            {/* Property Selector */}
            {!effectivePropertyId && (
              <Grid item xs={12}>
                <FormControl fullWidth error={validationErrors.some(err => err.includes('seleccionar una propiedad'))}>
                  <InputLabel id="property-select-label">Seleccionar Propiedad *</InputLabel>
                  <Select
                    labelId="property-select-label"
                    value={propertyData.property_id}
                    label="Seleccionar Propiedad *"
                    onChange={(e) => handlePropertySelect(e.target.value as string)}
                    disabled={propertiesLoading}
                  >
                    {propertiesLoading ? (
                      <MenuItem disabled>Cargando propiedades...</MenuItem>
                    ) : properties.length === 0 ? (
                      <MenuItem disabled>
                        <Box>
                          <Typography variant="body2" color="text.secondary">
                            No hay propiedades disponibles
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Aseg√∫rate de tener propiedades activas y no arrendadas
                          </Typography>
                        </Box>
                      </MenuItem>
                    ) : (
                      properties.map((property) => (
                        <MenuItem key={property.id} value={property.id}>
                          <Box>
                            <Typography variant="subtitle2">
                              {property.title || `${property.property_type} - ${property.area}m¬≤`}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {property.address}
                            </Typography>
                          </Box>
                        </MenuItem>
                      ))
                    )}
                  </Select>
                  {validationErrors.some(err => err.includes('seleccionar una propiedad')) && (
                    <Typography variant="caption" color="error" sx={{ mt: 1 }}>
                      Debe seleccionar una propiedad para continuar
                    </Typography>
                  )}
                </FormControl>
              </Grid>
            )}
            
            {propertyData.property_id && (
              <Grid item xs={12}>
                <Alert severity="success" sx={{ mb: 2 }}>
                  <Box display="flex" alignItems="center" gap={1} mb={1}>
                    <CheckIcon fontSize="small" />
                    <Typography variant="subtitle2" fontWeight="bold">Propiedad seleccionada:</Typography>
                  </Box>
                  <Typography variant="body2" fontWeight="medium">
                    üìç {propertyData.property_address}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    üìê {propertyData.property_area}m¬≤ ‚Ä¢ üõèÔ∏è {propertyData.property_rooms} hab. ‚Ä¢ üöø {propertyData.property_bathrooms} ba√±os
                    {propertyData.property_parking_spaces > 0 && ` ‚Ä¢ üöó ${propertyData.property_parking_spaces} parqueaderos`}
                  </Typography>
                </Alert>
              </Grid>
            )}

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Direcci√≥n Completa de la Propiedad *"
                value={propertyData.property_address}
                onChange={(e) => setPropertyData(prev => ({ ...prev, property_address: e.target.value }))}
                error={validationErrors.some(err => err.includes('direcci√≥n de la propiedad'))}
                helperText={effectivePropertyId ? "‚úÖ Auto-llenado desde la propiedad seleccionada. Puedes editarlo si es necesario." : "Direcci√≥n exacta incluida nomenclatura y referencias"}
                InputProps={{
                  startAdornment: effectivePropertyId ? (
                    <InputAdornment position="start">
                      <CheckIcon color="success" fontSize="small" />
                    </InputAdornment>
                  ) : undefined
                }}
                sx={effectivePropertyId ? { 
                  '& .MuiOutlinedInput-root': { 
                    bgcolor: 'success.50',
                    '&:hover': { bgcolor: 'success.100' },
                    '&.Mui-focused': { bgcolor: 'background.paper' }
                  } 
                } : undefined}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth sx={effectivePropertyId ? { 
                '& .MuiOutlinedInput-root': { 
                  bgcolor: 'success.50',
                  '&:hover': { bgcolor: 'success.100' },
                  '&.Mui-focused': { bgcolor: 'background.paper' }
                } 
              } : undefined}>
                <InputLabel>Tipo de Propiedad * {effectivePropertyId && '‚úÖ'}</InputLabel>
                <Select
                  value={contractData.property_type}
                  onChange={(e) => setContractData(prev => ({ ...prev, property_type: e.target.value as PropertyType }))}
                  label={`Tipo de Propiedad * ${effectivePropertyId ? '‚úÖ' : ''}`}
                >
                  <MenuItem value="apartamento">Apartamento</MenuItem>
                  <MenuItem value="casa">Casa</MenuItem>
                  <MenuItem value="local_comercial">Local Comercial</MenuItem>
                  <MenuItem value="oficina">Oficina</MenuItem>
                  <MenuItem value="bodega">Bodega</MenuItem>
                  <MenuItem value="habitacion">Habitaci√≥n</MenuItem>
                  <MenuItem value="finca">Finca</MenuItem>
                  <MenuItem value="lote">Lote</MenuItem>
                </Select>
                {effectivePropertyId && (
                  <Typography variant="caption" color="success.main" sx={{ mt: 0.5, ml: 1.5 }}>
                    Auto-llenado desde la propiedad
                  </Typography>
                )}
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="√Årea (m¬≤) *"
                type="number"
                value={propertyData.property_area === 0 ? '' : propertyData.property_area}
                onChange={(e) => setPropertyData(prev => ({ 
                  ...prev, 
                  property_area: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                error={validationErrors.some(err => err.includes('√°rea'))}
                helperText={effectivePropertyId ? "‚úÖ Auto-llenado desde la propiedad seleccionada" : ""}
                InputProps={{
                  startAdornment: effectivePropertyId ? (
                    <InputAdornment position="start">
                      <CheckIcon color="success" fontSize="small" />
                    </InputAdornment>
                  ) : undefined,
                  endAdornment: <InputAdornment position="end">m¬≤</InputAdornment>,
                }}
                sx={effectivePropertyId ? { 
                  '& .MuiOutlinedInput-root': { 
                    bgcolor: 'success.50',
                    '&:hover': { bgcolor: 'success.100' },
                    '&.Mui-focused': { bgcolor: 'background.paper' }
                  } 
                } : undefined}
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Estrato"
                type="number"
                value={propertyData.property_stratum === 0 ? '' : propertyData.property_stratum}
                onChange={(e) => setPropertyData(prev => ({ 
                  ...prev, 
                  property_stratum: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                inputProps={{ min: 1, max: 6 }}
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Habitaciones"
                type="number"
                value={propertyData.property_rooms === 0 ? '' : propertyData.property_rooms}
                onChange={(e) => setPropertyData(prev => ({ 
                  ...prev, 
                  property_rooms: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                inputProps={{ min: 0 }}
                helperText={effectivePropertyId ? "‚úÖ Auto-llenado desde la propiedad" : ""}
                InputProps={{
                  startAdornment: effectivePropertyId ? (
                    <InputAdornment position="start">
                      <CheckIcon color="success" fontSize="small" />
                    </InputAdornment>
                  ) : undefined,
                }}
                sx={effectivePropertyId ? { 
                  '& .MuiOutlinedInput-root': { 
                    bgcolor: 'success.50',
                    '&:hover': { bgcolor: 'success.100' },
                    '&.Mui-focused': { bgcolor: 'background.paper' }
                  } 
                } : undefined}
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Ba√±os"
                type="number"
                value={propertyData.property_bathrooms === 0 ? '' : propertyData.property_bathrooms}
                onChange={(e) => setPropertyData(prev => ({ 
                  ...prev, 
                  property_bathrooms: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                inputProps={{ min: 0 }}
                helperText={effectivePropertyId ? "‚úÖ Auto-llenado desde la propiedad" : ""}
                InputProps={{
                  startAdornment: effectivePropertyId ? (
                    <InputAdornment position="start">
                      <CheckIcon color="success" fontSize="small" />
                    </InputAdornment>
                  ) : undefined,
                }}
                sx={effectivePropertyId ? { 
                  '& .MuiOutlinedInput-root': { 
                    bgcolor: 'success.50',
                    '&:hover': { bgcolor: 'success.100' },
                    '&.Mui-focused': { bgcolor: 'background.paper' }
                  } 
                } : undefined}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Parqueaderos"
                type="number"
                value={propertyData.property_parking_spaces === 0 ? '' : propertyData.property_parking_spaces}
                onChange={(e) => setPropertyData(prev => ({ 
                  ...prev, 
                  property_parking_spaces: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                inputProps={{ min: 0 }}
                helperText={effectivePropertyId ? "‚úÖ Auto-llenado desde la propiedad" : ""}
                InputProps={{
                  startAdornment: effectivePropertyId ? (
                    <InputAdornment position="start">
                      <CheckIcon color="success" fontSize="small" />
                    </InputAdornment>
                  ) : undefined,
                }}
                sx={effectivePropertyId ? { 
                  '& .MuiOutlinedInput-root': { 
                    bgcolor: 'success.50',
                    '&:hover': { bgcolor: 'success.100' },
                    '&.Mui-focused': { bgcolor: 'background.paper' }
                  } 
                } : undefined}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ mt: 1 }}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={propertyData.property_furnished}
                      onChange={(e) => setPropertyData(prev => ({ ...prev, property_furnished: e.target.checked }))}
                      color={effectivePropertyId ? "success" : "primary"}
                    />
                  }
                  label={
                    <Box display="flex" alignItems="center" gap={1}>
                      {effectivePropertyId && <CheckIcon color="success" fontSize="small" />}
                      <Typography>Propiedad Amoblada</Typography>
                    </Box>
                  }
                />
                {effectivePropertyId && (
                  <Typography variant="caption" color="success.main" display="block">
                    ‚úÖ Auto-llenado desde la propiedad
                  </Typography>
                )}
              </Box>
            </Grid>

            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="subtitle1" gutterBottom>
                Template de Contrato Recomendado
              </Typography>

              <Grid container spacing={2}>
                {Object.entries(PROFESSIONAL_CONTRACT_TEMPLATES).map(([key, template]) => {
                  const isRecommended = template.property_types.includes(contractData.property_type as PropertyType);
                  
                  return (
                    <Grid item xs={12} md={6} key={key}>
                      <Card
                        sx={{
                          cursor: 'pointer',
                          border: selectedTemplate === key ? 2 : 1,
                          borderColor: selectedTemplate === key ? 'primary.main' : 'divider',
                          opacity: isRecommended ? 1 : 0.7,
                          '&:hover': { borderColor: 'primary.main' }
                        }}
                        onClick={() => setSelectedTemplate(key as keyof typeof PROFESSIONAL_CONTRACT_TEMPLATES)}
                      >
                        <CardContent>
                          <Box display="flex" alignItems="center" mb={1}>
                            <Box color={`${template.color}.main`} mr={1}>
                              {template.icon}
                            </Box>
                            <Typography variant="subtitle1" fontWeight="bold">
                              {template.title}
                            </Typography>
                            {isRecommended && (
                              <Chip label="Recomendado" size="small" color="success" sx={{ ml: 1 }} />
                            )}
                          </Box>
                          <Typography variant="body2" color="text.secondary">
                            {template.description}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {template.clauses.length} cl√°usulas ‚Ä¢ {template.recommended_duration} meses recomendados
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  );
                })}
              </Grid>
            </Grid>
          </Grid>
        );

      case 2: // Condiciones Econ√≥micas
        return (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom color="primary">
                <MoneyIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Condiciones Econ√≥micas
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Define los t√©rminos econ√≥micos del contrato de arrendamiento
              </Typography>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Canon Mensual de Arrendamiento *"
                type="number"
                value={contractData.monthly_rent === 0 ? '' : contractData.monthly_rent}
                onChange={(e) => setContractData(prev => ({ 
                  ...prev, 
                  monthly_rent: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                error={validationErrors.some(err => err.includes('canon mensual'))}
                InputProps={{
                  startAdornment: <InputAdornment position="start">$</InputAdornment>,
                }}
                helperText="Valor en pesos colombianos"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Dep√≥sito de Garant√≠a"
                type="number"
                value={contractData.security_deposit === 0 ? '' : contractData.security_deposit}
                onChange={(e) => setContractData(prev => ({ 
                  ...prev, 
                  security_deposit: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                InputProps={{
                  startAdornment: <InputAdornment position="start">$</InputAdornment>,
                }}
                helperText={`Recomendado: $${getRecommendedDeposit().toLocaleString('es-CO')}`}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Duraci√≥n del Contrato (meses) *"
                type="number"
                value={contractData.contract_duration_months === 0 ? '' : contractData.contract_duration_months}
                onChange={(e) => setContractData(prev => ({ 
                  ...prev, 
                  contract_duration_months: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                error={validationErrors.some(err => err.includes('duraci√≥n'))}
                inputProps={{ min: 1 }}
                helperText={`Recomendado: ${PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].recommended_duration} meses`}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Tipo de Incremento Anual</InputLabel>
                <Select
                  value={contractData.rent_increase_type}
                  onChange={(e) => setContractData(prev => ({ ...prev, rent_increase_type: e.target.value as 'ipc' | 'fixed' | 'negotiated' }))}
                  label="Tipo de Incremento Anual"
                >
                  <MenuItem value="ipc">IPC (√çndice de Precios al Consumidor)</MenuItem>
                  <MenuItem value="fixed">Porcentaje Fijo</MenuItem>
                  <MenuItem value="negotiated">Negociaci√≥n Anual</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="D√≠a de Pago del Canon"
                type="number"
                value={contractData.payment_day === 0 ? '' : contractData.payment_day}
                onChange={(e) => setContractData(prev => ({ 
                  ...prev, 
                  payment_day: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                inputProps={{ min: 1, max: 31 }}
                helperText="D√≠a del mes para el pago (1-31)"
              />
            </Grid>

            <Grid item xs={12}>
              <Alert severity="info" sx={{ mt: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  C√°lculo Autom√°tico de Fechas
                </Typography>
                <Typography variant="body2">
                  Las fechas de inicio y fin del contrato se establecer√°n cuando se invite al arrendatario.
                  El sistema calcular√° autom√°ticamente {contractData.contract_duration_months} meses de duraci√≥n.
                </Typography>
              </Alert>
            </Grid>
          </Grid>
        );

      case 3: // T√©rminos del Contrato
        return (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom color="primary">
                <SecurityIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                T√©rminos y Condiciones
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Configura las condiciones espec√≠ficas del arrendamiento
              </Typography>
            </Grid>

            <Grid item xs={12} md={6}>
              <Typography variant="subtitle1" gutterBottom>Servicios Incluidos</Typography>
              
              <FormControlLabel
                control={
                  <Switch
                    checked={contractData.utilities_included}
                    onChange={(e) => setContractData(prev => ({ ...prev, utilities_included: e.target.checked }))}
                  />
                }
                label="Servicios P√∫blicos Incluidos"
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={contractData.internet_included}
                    onChange={(e) => setContractData(prev => ({ ...prev, internet_included: e.target.checked }))}
                  />
                }
                label="Internet Incluido"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <Typography variant="subtitle1" gutterBottom>Pol√≠ticas de Uso</Typography>
              
              <FormControlLabel
                control={
                  <Switch
                    checked={contractData.pets_allowed}
                    onChange={(e) => setContractData(prev => ({ ...prev, pets_allowed: e.target.checked }))}
                  />
                }
                label="Mascotas Permitidas"
              />
              
              <FormControlLabel
                control={
                  <Switch
                    checked={contractData.smoking_allowed}
                    onChange={(e) => setContractData(prev => ({ ...prev, smoking_allowed: e.target.checked }))}
                  />
                }
                label="Fumar Permitido"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Pol√≠tica de Hu√©spedes</InputLabel>
                <Select
                  value={contractData.guests_policy}
                  onChange={(e) => setContractData(prev => ({ ...prev, guests_policy: e.target.value as 'no_guests' | 'limited' | 'unlimited' | 'no_overnight' }))}
                  label="Pol√≠tica de Hu√©spedes"
                >
                  <MenuItem value="no_guests">No se permiten hu√©spedes</MenuItem>
                  <MenuItem value="limited">Hu√©spedes limitados (previa autorizaci√≥n)</MenuItem>
                  <MenuItem value="unlimited">Hu√©spedes sin restricci√≥n</MenuItem>
                  <MenuItem value="no_overnight">Sin pernoctar</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="M√°ximo de Ocupantes"
                type="number"
                value={contractData.max_occupants === 0 ? '' : contractData.max_occupants}
                onChange={(e) => setContractData(prev => ({ 
                  ...prev, 
                  max_occupants: e.target.value === '' ? 0 : Number(e.target.value) 
                }))}
                inputProps={{ min: 1 }}
              />
            </Grid>

            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="subtitle1" gutterBottom>Garant√≠as y Responsabilidades</Typography>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={
                  <Switch
                    checked={contractData.guarantor_required}
                    onChange={(e) => setContractData(prev => ({ ...prev, guarantor_required: e.target.checked }))}
                  />
                }
                label="Codeudor Requerido"
              />
              
              {contractData.guarantor_required && (
                <FormControl fullWidth sx={{ mt: 2 }}>
                  <InputLabel>Tipo de Garant√≠a</InputLabel>
                  <Select
                    value={contractData.guarantor_type}
                    onChange={(e) => setContractData(prev => ({ ...prev, guarantor_type: e.target.value as 'personal' | 'company' | 'bank' | 'insurance' }))}
                    label="Tipo de Garant√≠a"
                  >
                    <MenuItem value="personal">Codeudor Personal</MenuItem>
                    <MenuItem value="company">Codeudor Empresa</MenuItem>
                    <MenuItem value="bank">Garant√≠a Bancaria</MenuItem>
                    <MenuItem value="insurance">Seguro de Arrendamiento</MenuItem>
                  </Select>
                </FormControl>
              )}
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Responsabilidad del Mantenimiento</InputLabel>
                <Select
                  value={contractData.maintenance_responsibility}
                  onChange={(e) => setContractData(prev => ({ ...prev, maintenance_responsibility: e.target.value as 'landlord' | 'tenant' | 'both' }))}
                  label="Responsabilidad del Mantenimiento"
                >
                  <MenuItem value="landlord">Arrendador</MenuItem>
                  <MenuItem value="tenant">Arrendatario</MenuItem>
                  <MenuItem value="both">Compartida</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        );

      case 4: // Cl√°usulas Especiales
        return (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom color="primary">
                <LegalIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Cl√°usulas Especiales
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Agrega cl√°usulas adicionales espec√≠ficas para este contrato (opcional)
              </Typography>
            </Grid>

            <Grid item xs={12}>
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography variant="subtitle1">
                    Cl√°usulas del Template: {PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].title}
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List>
                    {PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].clauses.map((clause, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <CheckIcon color="success" />
                        </ListItemIcon>
                        <ListItemText primary={clause} />
                      </ListItem>
                    ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Cl√°usulas Adicionales"
                multiline
                rows={6}
                value={contractData.special_clauses?.join('\n') || ''}
                onChange={(e) => {
                  const clauses = e.target.value.split('\n').filter(clause => clause.trim() !== '');
                  setContractData(prev => ({ ...prev, special_clauses: clauses }));
                }}
                helperText="Escribe cada cl√°usula en una l√≠nea separada. Estas se agregar√°n al template est√°ndar."
                placeholder="Ejemplo:&#10;- El arrendatario se compromete a no realizar modificaciones estructurales&#10;- Prohibido el uso de la propiedad para fines comerciales&#10;- El canon se pagar√° mediante transferencia bancaria"
              />
            </Grid>

            <Grid item xs={12}>
              <Alert severity="info">
                <Typography variant="subtitle2" gutterBottom>
                  üìã Template Incluido Autom√°ticamente
                </Typography>
                <Typography variant="body2">
                  El contrato incluir√° autom√°ticamente todas las cl√°usulas est√°ndar del template seleccionado, 
                  m√°s cualquier cl√°usula adicional que agregues aqu√≠. El contenido completo se generar√° al crear el contrato.
                </Typography>
              </Alert>
            </Grid>
          </Grid>
        );

      case 5: // Revisi√≥n y Creaci√≥n
        return (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom color="primary">
                <CheckIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                Revisi√≥n Final
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Revisa toda la informaci√≥n antes de crear el contrato
              </Typography>
            </Grid>

            {validationErrors.length > 0 && (
              <Grid item xs={12}>
                <Alert severity="error">
                  <Typography variant="subtitle2" gutterBottom>
                    Errores que deben corregirse:
                  </Typography>
                  <List dense>
                    {validationErrors.map((error, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <WarningIcon color="error" />
                        </ListItemIcon>
                        <ListItemText primary={error} />
                      </ListItem>
                    ))}
                  </List>
                </Alert>
              </Grid>
            )}

            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom color="primary">
                  üìã Resumen del Contrato
                </Typography>
                
                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary">TEMPLATE</Typography>
                  <Typography variant="body1">{PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].title}</Typography>
                </Box>

                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary">ARRENDADOR</Typography>
                  <Typography variant="body1">{landlordData.full_name}</Typography>
                  <Typography variant="body2" color="text.secondary">
                    {landlordData.document_type} {landlordData.document_number}
                  </Typography>
                </Box>

                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary">PROPIEDAD</Typography>
                  <Typography variant="body1">{propertyData.property_address}</Typography>
                  <Typography variant="body2" color="text.secondary">
                    {contractData.property_type} ‚Ä¢ {propertyData.property_area} m¬≤
                  </Typography>
                </Box>

                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary">CONDICIONES ECON√ìMICAS</Typography>
                  <Typography variant="body1">
                    Canon: ${contractData.monthly_rent?.toLocaleString('es-CO')} COP
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Dep√≥sito: ${contractData.security_deposit?.toLocaleString('es-CO')} COP
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Duraci√≥n: {contractData.contract_duration_months} meses
                  </Typography>
                </Box>

                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary">SERVICIOS Y POL√çTICAS</Typography>
                  <Typography variant="body2">
                    ‚Ä¢ Servicios p√∫blicos: {contractData.utilities_included ? 'Incluidos' : 'No incluidos'}
                  </Typography>
                  <Typography variant="body2">
                    ‚Ä¢ Internet: {contractData.internet_included ? 'Incluido' : 'No incluido'}
                  </Typography>
                  <Typography variant="body2">
                    ‚Ä¢ Mascotas: {contractData.pets_allowed ? 'Permitidas' : 'No permitidas'}
                  </Typography>
                  <Typography variant="body2">
                    ‚Ä¢ Codeudor: {contractData.guarantor_required ? 'Requerido' : 'No requerido'}
                  </Typography>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom color="primary">
                  üöÄ Pr√≥ximos Pasos
                </Typography>
                
                <List>
                  <ListItem>
                    <ListItemIcon>
                      <CheckIcon color="success" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="Crear contrato en estado BORRADOR"
                      secondary="El contrato se guardar√° con toda la informaci√≥n"
                    />
                  </ListItem>
                  
                  <ListItem>
                    <ListItemIcon>
                      <SendIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="Invitar al arrendatario"
                      secondary="Enviar invitaci√≥n por email, SMS o WhatsApp"
                    />
                  </ListItem>
                  
                  <ListItem>
                    <ListItemIcon>
                      <EditIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="Revisi√≥n y negociaci√≥n"
                      secondary="El arrendatario podr√° revisar y hacer objeciones"
                    />
                  </ListItem>
                  
                  <ListItem>
                    <ListItemIcon>
                      <SecurityIcon color="primary" />
                    </ListItemIcon>
                    <ListItemText 
                      primary="Firma biom√©trica digital"
                      secondary="Proceso de 5 pasos de verificaci√≥n avanzada"
                    />
                  </ListItem>
                </List>

                <Alert severity="success" sx={{ mt: 2 }}>
                  <Typography variant="body2">
                    Una vez creado, podr√°s gestionar todo el proceso desde el 
                    <strong> Dashboard de Contratos del Arrendador</strong>
                  </Typography>
                </Alert>
              </Paper>
            </Grid>
          </Grid>
        );

      default:
        return null;
    }
  };

  if (loading) {
    return (
      <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>
        <Card>
          <CardContent>
            <Box display="flex" flexDirection="column" alignItems="center" py={4}>
              <LinearProgress sx={{ width: '100%', mb: 2 }} />
              <Typography>Cargando informaci√≥n del contrato...</Typography>
            </Box>
          </CardContent>
        </Card>
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>
      <Card>
        <CardHeader
          title={
            <Box display="flex" alignItems="center" gap={1}>
              <ContractIcon color="primary" />
              <Typography variant="h5">
                {isEdit ? 'Editar Contrato de Arrendador' : 'Nuevo Contrato - Sistema Controlado por Arrendador'}
              </Typography>
            </Box>
          }
          action={
            <Box display="flex" gap={1}>
              <Tooltip title="Vista previa del template">
                <IconButton onClick={() => setPreviewMode(true)}>
                  <PreviewIcon />
                </IconButton>
              </Tooltip>
              <Chip
                label={PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].title}
                color="primary"
                variant="outlined"
                icon={<TemplateIcon />}
              />
            </Box>
          }
        />
        
        <CardContent>
          <Stepper activeStep={activeStep} orientation="vertical">
            {steps.map((label, index) => (
              <Step key={label}>
                <StepLabel>
                  <Typography variant="subtitle1" fontWeight="medium">
                    {label}
                  </Typography>
                </StepLabel>
                <StepContent>
                  {renderStepContent(index)}
                  <Box sx={{ mb: 2, mt: 4 }}>
                    {index === steps.length - 1 && (
                      <Button
                        variant="outlined"
                        onClick={handleContractPreview}
                        startIcon={<VisibilityIcon />}
                        sx={{ mr: 1 }}
                        size="large"
                        color={contractHasBeenPreviewed ? "success" : "primary"}
                      >
                        {contractHasBeenPreviewed ? '‚úÖ Ver/Editar Borrador' : 'Ver Borrador del Contrato'}
                      </Button>
                    )}
                    <LoadingButton
                      variant="contained"
                      onClick={index === steps.length - 1 ? handleSubmit : handleNext}
                      loading={loading}
                      sx={{ mr: 1 }}
                      size="large"
                    >
                      {index === steps.length - 1 ? 'Crear Contrato' : 'Continuar'}
                    </LoadingButton>
                    <Button
                      disabled={index === 0}
                      onClick={handleBack}
                      sx={{ mr: 1 }}
                      size="large"
                    >
                      Atr√°s
                    </Button>
                    <Button
                      onClick={handleCancel}
                      color="inherit"
                      size="large"
                    >
                      Cancelar
                    </Button>
                  </Box>
                </StepContent>
              </Step>
            ))}
          </Stepper>
        </CardContent>
      </Card>

      {/* Contract Preview Dialog - Editable Draft */}
      <Dialog
        open={contractPreviewMode}
        onClose={() => setContractPreviewMode(false)}
        maxWidth="lg"
        fullWidth
        PaperProps={{
          sx: { height: '90vh' }
        }}
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center" gap={1}>
              <VisibilityIcon color="primary" />
              <Typography variant="h6">
                Borrador del Contrato - {PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].title}
              </Typography>
            </Box>
            <Box display="flex" alignItems="center" gap={1}>
              <Chip label="BORRADOR EDITABLE" color="warning" size="small" />
              <IconButton onClick={() => setContractPreviewMode(false)}>
                <CloseIcon />
              </IconButton>
            </Box>
          </Box>
        </DialogTitle>
        <DialogContent sx={{ pb: 1 }}>
          <Alert severity="info" sx={{ mb: 2 }}>
            <Typography variant="subtitle2" gutterBottom>
              üìù Editor de Borrador del Contrato
            </Typography>
            <Typography variant="body2">
              Puede editar el contenido del contrato directamente aqu√≠. Los cambios se aplicar√°n al momento de crear el contrato.
              Este borrador se generar√° oficialmente una vez que haga clic en "Crear Contrato".
            </Typography>
          </Alert>
          
          <TextField
            fullWidth
            multiline
            value={contractDraftContent}
            onChange={(e) => setContractDraftContent(e.target.value)}
            variant="outlined"
            sx={{
              '& .MuiInputBase-root': {
                minHeight: 'calc(90vh - 200px)',
                alignItems: 'flex-start',
                fontFamily: 'monospace',
                fontSize: '14px',
                lineHeight: 1.6,
              },
              '& .MuiInputBase-input': {
                padding: '20px',
                minHeight: 'calc(90vh - 240px) !important',
              }
            }}
            placeholder="El contenido del contrato aparecer√° aqu√≠ una vez que complete todos los campos requeridos..."
          />
        </DialogContent>
        <DialogActions sx={{ p: 2 }}>
          <Box display="flex" justifyContent="space-between" width="100%">
            <Box>
              <Typography variant="caption" color="text.secondary">
                üí° Tip: Use formato Markdown para mejor presentaci√≥n
              </Typography>
            </Box>
            <Box>
              <Button 
                onClick={() => setContractPreviewMode(false)}
                color="inherit"
                sx={{ mr: 1 }}
              >
                Cancelar
              </Button>
              <Button
                onClick={handleSaveContractChanges}
                variant="contained"
                startIcon={<SaveIcon />}
                color="primary"
              >
                Guardar Cambios
              </Button>
            </Box>
          </Box>
        </DialogActions>
      </Dialog>

      {/* Template Preview Dialog */}
      <Dialog
        open={previewMode}
        onClose={() => setPreviewMode(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" gap={1}>
            <PreviewIcon color="primary" />
            Vista Previa del Template: {PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].title}
          </Box>
        </DialogTitle>
        <DialogContent>
          <Paper sx={{ p: 3, bgcolor: 'grey.50' }}>
            <Typography variant="h6" gutterBottom>
              Cl√°usulas Incluidas:
            </Typography>
            <List>
              {PROFESSIONAL_CONTRACT_TEMPLATES[selectedTemplate].clauses.map((clause, index) => (
                <ListItem key={index}>
                  <ListItemIcon>
                    <CheckIcon color="success" />
                  </ListItemIcon>
                  <ListItemText primary={clause} />
                </ListItem>
              ))}
            </List>
            
            {contractData.special_clauses && contractData.special_clauses.length > 0 && (
              <>
                <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                  Cl√°usulas Adicionales:
                </Typography>
                <List>
                  {contractData.special_clauses.map((clause, index) => (
                    <ListItem key={index}>
                      <ListItemIcon>
                        <EditIcon color="primary" />
                      </ListItemIcon>
                      <ListItemText primary={clause} />
                    </ListItem>
                  ))}
                </List>
              </>
            )}

            <Alert severity="info" sx={{ mt: 2 }}>
              <Typography variant="body2">
                El contenido completo del contrato se generar√° autom√°ticamente al crearlo, 
                incluyendo todas las cl√°usulas legales requeridas seg√∫n la normativa colombiana.
              </Typography>
            </Alert>
          </Paper>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPreviewMode(false)}>
            Cerrar
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default LandlordContractForm;

/* PAYLOAD FIX 1754467945892 - PROPERTY ID INITIALIZATION - Fixed property_id missing in propertyData */
/* FORCE RELOAD 1754456937847 - LANDLORD_CONTRACT_FORM - Nuclear fix applied */
