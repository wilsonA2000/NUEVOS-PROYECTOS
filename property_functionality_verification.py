#!/usr/bin/env python3
"""
Script para verificar el estado actual de las funcionalidades de propiedades
Verifica datos reales en la base de datos y funcionalidades del frontend
"""

import os
import sys
import json
import requests
from datetime import datetime
from pathlib import Path

# Configurar el path de Django
sys.path.insert(0, '/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'verihome.settings')

import django
django.setup()

from django.contrib.auth import get_user_model
from properties.models import Property, Amenity, PropertyAmenity, PropertyImage
from users.models import Profile

User = get_user_model()

def print_header(title):
    print(f"\n{'='*80}")
    print(f"üîç {title}")
    print(f"{'='*80}")

def print_section(title):
    print(f"\n{'‚ñ∂'*3} {title}")
    print("-" * 60)

def verify_database_data():
    """Verifica los datos reales en la base de datos"""
    print_header("VERIFICACI√ìN DE DATOS EN BASE DE DATOS")
    
    # Usuarios
    print_section("USUARIOS")
    users = User.objects.all()
    print(f"Total usuarios: {users.count()}")
    for user in users:
        profile = getattr(user, 'profile', None)
        user_type = profile.user_type if profile else 'N/A'
        print(f"  ‚Ä¢ {user.email} - Tipo: {user_type} - Activo: {user.is_active}")
    
    # Propiedades
    print_section("PROPIEDADES")
    properties = Property.objects.all()
    print(f"Total propiedades: {properties.count()}")
    
    if properties.exists():
        for prop in properties:
            print(f"\nüè† PROPIEDAD ID: {prop.id}")
            print(f"   T√≠tulo: {prop.title}")
            print(f"   Direcci√≥n: {prop.address}")
            print(f"   Tipo: {prop.property_type}")
            print(f"   Estado: {prop.status}")
            print(f"   Precio renta: ${prop.rent_price:,.0f}" if prop.rent_price else "   Sin precio de renta")
            print(f"   Precio venta: ${prop.sale_price:,.0f}" if prop.sale_price else "   Sin precio de venta")
            print(f"   Habitaciones: {prop.bedrooms}")
            print(f"   Ba√±os: {prop.bathrooms}")
            print(f"   √Årea: {prop.total_area} m¬≤")
            print(f"   Propietario: {prop.landlord.email if prop.landlord else 'N/A'}")
            print(f"   Creado: {prop.created_at.strftime('%Y-%m-%d %H:%M')}")
            
            # Im√°genes
            images = PropertyImage.objects.filter(property=prop)
            print(f"   Im√°genes: {images.count()}")
            for img in images:
                print(f"     - {img.image_url or img.image}")
            
            # Amenidades
            amenities = PropertyAmenity.objects.filter(property=prop, available=True)
            print(f"   Amenidades: {amenities.count()}")
            for amenity in amenities:
                print(f"     - {amenity.amenity.name}")
    else:
        print("‚ùå No se encontraron propiedades en la base de datos")
    
    # Amenidades disponibles
    print_section("AMENIDADES DISPONIBLES")
    amenities = Amenity.objects.all()
    print(f"Total amenidades: {amenities.count()}")
    for amenity in amenities:
        print(f"  ‚Ä¢ {amenity.name} - {amenity.icon}")

def verify_api_endpoints():
    """Verifica que los endpoints de API est√©n funcionando"""
    print_header("VERIFICACI√ìN DE ENDPOINTS API")
    
    base_url = "http://localhost:8000"
    
    # Crear usuario de test y obtener token
    print_section("AUTENTICACI√ìN")
    try:
        # Intentar login con usuario existente
        login_data = {
            "email": "landlord@test.com",
            "password": "test123"
        }
        
        login_response = requests.post(f"{base_url}/api/v1/users/auth/login/", 
                                     data=login_data, timeout=10)
        
        if login_response.status_code == 200:
            token = login_response.json().get('access')
            print(f"‚úÖ Login exitoso - Token obtenido")
            headers = {"Authorization": f"Bearer {token}"}
        else:
            print(f"‚ùå Login fallido: {login_response.status_code}")
            print(f"   Response: {login_response.text}")
            headers = {}
    except Exception as e:
        print(f"‚ùå Error en login: {str(e)}")
        headers = {}
    
    # Endpoints a verificar
    endpoints = [
        ("GET", "/api/v1/properties/properties/", "Listar propiedades"),
        ("GET", "/api/v1/properties/amenities/", "Listar amenidades"),
        ("GET", "/api/v1/properties/filters/", "Filtros de propiedades"),
        ("GET", "/api/v1/properties/stats/", "Estad√≠sticas de propiedades"),
    ]
    
    print_section("ENDPOINTS DE PROPIEDADES")
    for method, endpoint, description in endpoints:
        try:
            if method == "GET":
                response = requests.get(f"{base_url}{endpoint}", 
                                      headers=headers, timeout=10)
            
            print(f"  {method} {endpoint}")
            print(f"    üìã {description}")
            print(f"    üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    print(f"    üì¶ Datos: {len(data)} elementos")
                elif isinstance(data, dict):
                    if 'results' in data:
                        print(f"    üì¶ Datos: {len(data['results'])} elementos")
                    else:
                        print(f"    üì¶ Datos: {len(data)} campos")
                print(f"    ‚úÖ OK")
            else:
                print(f"    ‚ùå Error: {response.text[:100]}...")
                
        except Exception as e:
            print(f"    ‚ùå Excepci√≥n: {str(e)}")

def verify_frontend_components():
    """Verifica los componentes del frontend"""
    print_header("VERIFICACI√ìN DE COMPONENTES FRONTEND")
    
    # Rutas de archivos cr√≠ticos
    frontend_files = [
        ("PropertyList (Page)", "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/pages/properties/PropertyList.tsx"),
        ("PropertyList (Component)", "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/components/properties/PropertyList.tsx"),
        ("PropertyDetail", "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/components/properties/PropertyDetail.tsx"),
        ("useProperties Hook", "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/hooks/useProperties.ts"),
        ("PropertyService", "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/services/propertyService.ts"),
    ]
    
    print_section("ARCHIVOS CR√çTICOS")
    for name, filepath in frontend_files:
        if os.path.exists(filepath):
            print(f"‚úÖ {name}: {filepath}")
            # Verificar funcionalidades clave
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # Buscar funcionalidades espec√≠ficas
                if "PropertyList" in name:
                    has_delete = "deleteProperty" in content or "Delete" in content
                    has_edit = "EditIcon" in content or "handleEdit" in content
                    has_navigation = "navigate" in content or "onClick" in content
                    print(f"    üîÑ Funcionalidad eliminar: {'‚úÖ' if has_delete else '‚ùå'}")
                    print(f"    ‚úèÔ∏è Funcionalidad editar: {'‚úÖ' if has_edit else '‚ùå'}")
                    print(f"    üîó Navegaci√≥n: {'‚úÖ' if has_navigation else '‚ùå'}")
                
                elif "PropertyDetail" in name:
                    has_edit_button = "EditIcon" in content and "Editar" in content
                    has_delete_button = "DeleteIcon" in content and "Eliminar" in content
                    has_navigation = "navigate" in content
                    print(f"    ‚úèÔ∏è Bot√≥n editar: {'‚úÖ' if has_edit_button else '‚ùå'}")
                    print(f"    üóëÔ∏è Bot√≥n eliminar: {'‚úÖ' if has_delete_button else '‚ùå'}")
                    print(f"    üîó Navegaci√≥n: {'‚úÖ' if has_navigation else '‚ùå'}")
        else:
            print(f"‚ùå {name}: {filepath} (No encontrado)")

def analyze_reported_issues():
    """Analiza los problemas reportados espec√≠ficamente"""
    print_header("AN√ÅLISIS DE PROBLEMAS REPORTADOS")
    
    issues = [
        "No se puede eliminar propiedades",
        "No se puede hacer click para ver detalles", 
        "Los datos no se ven en miniatura",
        "Faltan botones de editar"
    ]
    
    print_section("PROBLEMAS REPORTADOS")
    for issue in issues:
        print(f"‚ùì {issue}")
    
    print_section("AN√ÅLISIS DE COMPONENTES")
    
    # Verificar PropertyList de p√°ginas (m√°s usado)
    page_list_path = "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/pages/properties/PropertyList.tsx"
    if os.path.exists(page_list_path):
        with open(page_list_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        print("üîç PropertyList (Page) - An√°lisis:")
        
        # Problema 1: No se puede eliminar
        if "deleteProperty" in content and "DeleteIcon" in content:
            print("  ‚úÖ Bot√≥n eliminar presente")
            if "handleDeleteProperty" in content:
                print("  ‚úÖ Handler de eliminaci√≥n presente")
            else:
                print("  ‚ùå Handler de eliminaci√≥n ausente")
        else:
            print("  ‚ùå Funcionalidad eliminar ausente")
        
        # Problema 2: No se puede hacer click para ver detalles
        if "navigate" in content and "onClick" in content:
            print("  ‚úÖ Navegaci√≥n presente")
            # Buscar espec√≠ficamente navegaci√≥n a detalle
            if "/properties/" in content and "navigate" in content:
                print("  ‚úÖ Navegaci√≥n a detalle presente")
            else:
                print("  ‚ùå Navegaci√≥n a detalle ausente")
        else:
            print("  ‚ùå Navegaci√≥n ausente")
        
        # Problema 3: Datos no se ven en miniatura
        if "CardContent" in content and "property.title" in content:
            print("  ‚úÖ Datos en cards presentes")
        else:
            print("  ‚ùå Datos en cards ausentes")
        
        # Problema 4: Faltan botones de editar
        if "EditIcon" in content and "handleEdit" in content:
            print("  ‚úÖ Bot√≥n editar presente")
        else:
            print("  ‚ùå Bot√≥n editar ausente")
    
    # Verificar PropertyDetail
    detail_path = "/mnt/c/Users/wilso/Desktop/NUEVOS PROYECTOS/frontend/src/components/properties/PropertyDetail.tsx"
    if os.path.exists(detail_path):
        with open(detail_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        print("\nüîç PropertyDetail - An√°lisis:")
        
        if "EditIcon" in content and "Editar Propiedad" in content:
            print("  ‚úÖ Bot√≥n editar presente")
        else:
            print("  ‚ùå Bot√≥n editar ausente")
        
        if "DeleteIcon" in content and "Eliminar" in content:
            print("  ‚úÖ Bot√≥n eliminar presente")
        else:
            print("  ‚ùå Bot√≥n eliminar ausente")

def create_test_data_if_needed():
    """Crea datos de prueba si no existen"""
    print_header("CREACI√ìN DE DATOS DE PRUEBA")
    
    if Property.objects.count() == 0:
        print("‚ùå No hay propiedades. Creando datos de prueba...")
        
        # Crear usuario landlord si no existe
        landlord_email = "landlord@test.com"
        landlord = User.objects.filter(email=landlord_email).first()
        
        if not landlord:
            print("Creando usuario landlord...")
            landlord = User.objects.create_user(
                email=landlord_email,
                password="test123",
                is_active=True
            )
            Profile.objects.create(
                user=landlord,
                user_type='landlord',
                first_name='Test',
                last_name='Landlord'
            )
        
        # Crear propiedades de prueba
        properties_data = [
            {
                "title": "Apartamento Moderno en El Poblado",
                "address": "Calle 10 #20-30, El Poblado, Medell√≠n",
                "property_type": "apartment",
                "bedrooms": 3,
                "bathrooms": 2,
                "total_area": 120,
                "rent_price": 2500000,
                "security_deposit": 2500000,
                "status": "available",
                "description": "Hermoso apartamento moderno con excelente ubicaci√≥n",
                "furnished": True,
                "pets_allowed": False,
                "parking_spaces": 1,
            },
            {
                "title": "Casa Familiar en Rionegro",
                "address": "Carrera 50 #25-15, Rionegro, Antioquia",
                "property_type": "house",
                "bedrooms": 4,
                "bathrooms": 3,
                "total_area": 200,
                "rent_price": 3000000,
                "security_deposit": 3000000,
                "status": "available",
                "description": "Casa familiar con jard√≠n y zona verde",
                "furnished": False,
                "pets_allowed": True,
                "parking_spaces": 2,
            },
            {
                "title": "Estudio Ejecutivo en Laureles",
                "address": "Calle 33 #70-20, Laureles, Medell√≠n",
                "property_type": "studio",
                "bedrooms": 1,
                "bathrooms": 1,
                "total_area": 45,
                "rent_price": 1200000,
                "security_deposit": 1200000,
                "status": "available",
                "description": "Estudio moderno perfecto para profesionales",
                "furnished": True,
                "pets_allowed": False,
                "parking_spaces": 1,
            }
        ]
        
        created_properties = []
        for prop_data in properties_data:
            prop = Property.objects.create(
                landlord=landlord,
                **prop_data
            )
            created_properties.append(prop)
            print(f"‚úÖ Propiedad creada: {prop.title}")
        
        print(f"‚úÖ {len(created_properties)} propiedades creadas exitosamente")
        
        return created_properties
    else:
        print(f"‚úÖ Ya existen {Property.objects.count()} propiedades")
        return list(Property.objects.all())

def main():
    """Funci√≥n principal"""
    print_header("VERIFICACI√ìN COMPLETA DE FUNCIONALIDADES DE PROPIEDADES")
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # 1. Verificar datos en base de datos
        verify_database_data()
        
        # 2. Crear datos de prueba si es necesario
        create_test_data_if_needed()
        
        # 3. Verificar endpoints API
        verify_api_endpoints()
        
        # 4. Verificar componentes frontend
        verify_frontend_components()
        
        # 5. Analizar problemas reportados
        analyze_reported_issues()
        
        print_header("RESUMEN Y RECOMENDACIONES")
        print("‚úÖ Verificaci√≥n completa finalizada")
        print("\nüéØ PR√ìXIMOS PASOS:")
        print("1. Revisar los resultados de cada secci√≥n")
        print("2. Verificar que el servidor Django est√© corriendo")
        print("3. Verificar que el frontend React est√© corriendo")
        print("4. Probar manualmente las funcionalidades reportadas")
        print("5. Revisar logs del navegador para errores JavaScript")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la verificaci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()