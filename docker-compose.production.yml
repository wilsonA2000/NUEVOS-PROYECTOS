version: '3.8'

services:
  # =============================================================================
  # SERVICIO PRINCIPAL - DJANGO WEB APPLICATION (PRODUCCIÓN)
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - USE_S3=${USE_S3:-True}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./logs:/app/logs
    networks:
      - verihome-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      sh -c "
        echo 'Production: Waiting for database...' &&
        while ! nc -z ${DATABASE_HOST} ${DATABASE_PORT:-5432}; do sleep 1; done &&
        echo 'Database is ready!' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn verihome.wsgi:application 
          --bind 0.0.0.0:8000 
          --workers=4 
          --threads=2 
          --worker-class=gthread 
          --timeout=60 
          --keepalive=2 
          --max-requests=1000 
          --max-requests-jitter=50 
          --preload"

  # =============================================================================
  # SERVICIO CELERY WORKER - TAREAS ASÍNCRONAS (PRODUCCIÓN)
  # =============================================================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
    networks:
      - verihome-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c "
        echo 'Production: Waiting for database and redis...' &&
        while ! nc -z ${DATABASE_HOST} ${DATABASE_PORT:-5432}; do sleep 1; done &&
        while ! nc -z ${REDIS_HOST:-redis} ${REDIS_PORT:-6379}; do sleep 1; done &&
        echo 'Starting Celery worker...' &&
        celery -A verihome worker 
          --loglevel=info 
          --concurrency=4 
          --max-tasks-per-child=1000 
          --time-limit=300 
          --soft-time-limit=240"

  # =============================================================================
  # SERVICIO CELERY BEAT - TAREAS PROGRAMADAS (PRODUCCIÓN)
  # =============================================================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    depends_on:
      - db
      - redis
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
    networks:
      - verihome-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    command: >
      sh -c "
        echo 'Production: Waiting for database and redis...' &&
        while ! nc -z ${DATABASE_HOST} ${DATABASE_PORT:-5432}; do sleep 1; done &&
        while ! nc -z ${REDIS_HOST:-redis} ${REDIS_PORT:-6379}; do sleep 1; done &&
        echo 'Starting Celery beat...' &&
        celery -A verihome beat 
          --loglevel=info 
          --scheduler django_celery_beat.schedulers:DatabaseScheduler"

  # =============================================================================
  # SERVICIO NGINX - PROXY REVERSO (PRODUCCIÓN)
  # =============================================================================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/conf.d/default.conf
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - verihome-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # =============================================================================
  # SERVICIO DE MONITOREO - PROMETHEUS (OPCIONAL)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - verihome-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # =============================================================================
  # SERVICIO DE MONITOREO - GRAFANA (OPCIONAL)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - verihome-network
    restart: unless-stopped

# =============================================================================
# REDES PARA PRODUCCIÓN
# =============================================================================
networks:
  verihome-network:
    driver: overlay
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16

# =============================================================================
# VOLÚMENES PERSISTENTES PARA PRODUCCIÓN
# =============================================================================
volumes:
  static_files:
    driver: local
  media_files:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local